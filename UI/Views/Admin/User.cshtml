@using System.Text.Json
@{
    ViewData["Title"] = "Управление пользователями";
    var language = ViewBag.Language;

    var filter = ViewBag.pageData.From("Filter");
    var postName = ViewBag.pageData.From("PostName");
    var communityName = ViewBag.pageData.From("CommunityName");
    var content = ViewBag.pageData.From("Content");
    var contentComment = ViewBag.pageData.From("ContentComment");
    var prev = ViewBag.pageData.From("Prev");
    var next = ViewBag.pageData.From("Next");
    var nameRu = ViewBag.pageData.From("NameRu");
    var nameEng = ViewBag.pageData.From("NameEng");
    var add = ViewBag.pageData.From("Add");
    var save = ViewBag.pageData.From("Save");
    var cancel = ViewBag.pageData.From("Cancel");
    var confDelete = Html.Raw(JsonSerializer.Serialize(ViewBag.pageData.From("ConfDelete")));
    var confMessage = Html.Raw(JsonSerializer.Serialize(ViewBag.pageData.From("ConfMessage")));
    var confEdit = Html.Raw(JsonSerializer.Serialize(ViewBag.pageData.From("ConfEdit")));
    var confMessageEdit = Html.Raw(JsonSerializer.Serialize(ViewBag.pageData.From("ConfMessageEdit")));
    var conf = ViewBag.pageData.From("Conf");
    var user = ViewBag.pageData.From("User");
    var post = ViewBag.pageData.From("Post");
    var community = ViewBag.pageData.From("Community");
    var category = ViewBag.pageData.From("Category");
    var comment = ViewBag.pageData.From("Comment");
    var titleUser = ViewBag.pageData.From("TitleUser");
    var titlePost = ViewBag.pageData.From("TitlePost");
    var titleCommunity = ViewBag.pageData.From("TitleCommunity");
    var titleCategory = ViewBag.pageData.From("TitleCategory");
    var titleComment = ViewBag.pageData.From("TitleComment");
    var userName = ViewBag.pageData.From("UserName");
}

@section Head {
    <style>
        .modal-backdrop-custom {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background-color: rgba(0, 0, 0, 0.4);
            z-index: 1040;
        }

        .modal-confirm-role {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 2rem;
            border-radius: 1rem;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
            z-index: 1050;
            width: 90%;
            max-width: 400px;
        }

        .modal-footer {
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
        }

        .modal-title {
            font-weight: bold;
            font-size: 1.2rem;
            margin-bottom: 1rem;
        }
    </style>
}

@section Body {
    <div class="app-wrapper">
        <div class="main-content">
            <div class="container py-4">
                <div class="card p-4 shadow" style="border-radius: 1rem;">
                @await Html.PartialAsync("_AdminNav")
                <div class="row mb-4">
                    <div class="col">
                        <h2 class="fw-bold">@titleUser</h2>
                    </div>
                </div>

                <!-- Фильтр только по имени -->
                <div class="filter-panel mb-4">
                    <form id="userFilterForm" class="row g-2 align-items-end">
                        <div class="col-md-4">
                            <label class="form-label mb-1">@userName</label>
                            <input type="text" class="form-control" id="filterName" placeholder="@userName">
                        </div>
                        <div class="col-md-2">
                            <button type="submit" class="btn btn-primary w-100"><i class="bi bi-funnel"></i> @filter</button>
                        </div>
                    </form>
                </div>

                <!-- Таблица пользователей -->
                <div class="users-table position-relative">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0" id="usersTable">
                            <thead class="table-header">
                                <tr>
                                        <th>ID</th>
                                        <th>@(language == "ru" ? "Имя" : "Name")</th>
                                        <th>Email</th>
                                        <th>@(language == "ru" ? "Роль" : "Role")</th>
                                        <th>@(language == "ru" ? "Действия" : "Actions")</th>
                                </tr>
                            </thead>
                            <tbody id="usersTableBody">
                                <!-- Данные будут загружены через JavaScript -->
                            </tbody>
                        </table>
                    </div>
                    <div class="pagination-controls">
                        <button id="prevPageBtn" class="btn btn-outline-secondary btn-sm">&larr; Назад</button>
                        <span id="pageInfo" class="align-self-center"></span>
                        <button id="nextPageBtn" class="btn btn-outline-secondary btn-sm">Вперёд &rarr;</button>
                    </div>
                </div>

                <!-- Модальное окно подтверждения смены роли/удаления -->
                <div id="roleModalBackdrop" class="modal-backdrop-custom" style="display:none;"></div>
                <div id="roleModal" class="modal-confirm-role" style="display:none;">
                    <div class="modal-title" id="roleModalTitle">@confDelete</div>
                    <div id="roleModalText" class="mb-3"></div>
                    <div class="modal-footer">
                        <button id="roleModalCancel" class="btn btn-secondary">@cancel</button>
                        <button id="roleModalConfirm" class="btn btn-primary">@conf</button>
                    </div>
                </div>
                </div>
            </div>
        </div>
    </div>
}

@section Script {
    <script>
        let currentPage = 1;
        let totalPages = 1;
        const pageSize = 20;
        let filter = {
            name: ""
        };

        // Для модального окна смены роли/удаления
        let pendingRoleChange = { userId: null, newRole: null, selectElem: null, oldRole: null };
        let pendingDelete = { userId: null, rowElem: null };

        async function loadUsers(page = 1) {
            try {
                const params = new URLSearchParams();
                params.append("name", filter.name);
                params.append("curPage", page);

                const response = await fetch(`/user-admin-list/?${params.toString()}`);
                const data = await response.json();

                const tbody = document.getElementById('usersTableBody');
                tbody.innerHTML = '';

                totalPages = data.length < pageSize && page === 1 ? 1 : (data.length === pageSize ? page + 1 : page);

                currentPage = page;

                data.forEach(user => {
                    const row = document.createElement("tr");
                    row.innerHTML = `
                        <td><a href="/userPage/${user.id}" target="_blank">${user.id}</a></td>
                        <td>${user.userName}</td>
                        <td>${user.email || ""}</td>
                        <td>
                            <select class="form-select form-select-sm role-select" data-user-id="${user.id}" data-current-role="${user.role || ''}">
                                <option value="User" ${user.role === "User" ? "selected" : ""}>User</option>
                                <option value="Admin" ${user.role === "Admin" ? "selected" : ""}>Admin</option>
                            </select>
                        </td>
                        <td class="action-buttons">
                            <button class="btn btn-sm btn-outline-danger" data-user-id="${user.id}" title="Удалить">
                                <i class="bi bi-trash"></i>
                            </button>
                        </td>
                    `;
                    tbody.appendChild(row);
                });

                // Назначаем обработчик на все select после рендера
                document.querySelectorAll('.role-select').forEach(select => {
                    select.addEventListener('focus', function () {
                        // Сохраняем роль при фокусе (до изменения)
                        this.dataset.lastRole = this.value;
                    });
                    select.addEventListener('change', function (e) {
                        const userId = this.getAttribute('data-user-id');
                        const oldRole = this.dataset.lastRole || this.getAttribute('data-current-role') || '';
                        const newRole = this.value;
                        // Если роль не изменилась, не показываем модалку
                        if (oldRole === newRole) {
                            // Вернуть select к старому значению
                            this.value = oldRole;
                            return;
                        }
                        showRoleModal(userId, newRole, this, oldRole);
                    });
                });

                // Обработчик для удаления
                document.querySelectorAll('.action-buttons .btn-outline-danger').forEach(btn => {
                    btn.addEventListener('click', function () {
                        const userId = this.getAttribute('data-user-id');
                        showDeleteModal(userId, this.closest('tr'));
                    });
                });

                document.getElementById('prevPageBtn').disabled = currentPage === 1;
                document.getElementById('nextPageBtn').disabled = data.length < pageSize;
                document.getElementById('pageInfo').textContent = `Страница ${currentPage}`;
            } catch (error) {
                console.error('Ошибка при загрузке пользователей:', error);
            }
        }

        // Модальное окно подтверждения смены роли
        function showRoleModal(userId, newRole, selectElem, oldRole) {
            pendingRoleChange = { userId, newRole, selectElem, oldRole };
            pendingDelete = { userId: null, rowElem: null };
            document.getElementById('roleModalTitle').innerText = @confEdit;
            document.getElementById('roleModalText').innerText = @confMessageEdit;
            document.getElementById('roleModalBackdrop').style.display = 'block';
            document.getElementById('roleModal').style.display = 'block';
        }

        // Модальное окно подтверждения удаления
        function showDeleteModal(userId, rowElem) {
            pendingDelete = { userId, rowElem };
            pendingRoleChange = { userId: null, newRole: null, selectElem: null, oldRole: null };
            document.getElementById('roleModalTitle').innerText = @confDelete;
            document.getElementById('roleModalText').innerText = @confMessage;
            document.getElementById('roleModalBackdrop').style.display = 'block';
            document.getElementById('roleModal').style.display = 'block';
        }

        function hideRoleModal() {
            document.getElementById('roleModalBackdrop').style.display = 'none';
            document.getElementById('roleModal').style.display = 'none';
            // Вернуть select в исходное положение, если отменили смену роли
            if (pendingRoleChange.selectElem && pendingRoleChange.oldRole) {
                pendingRoleChange.selectElem.value = pendingRoleChange.oldRole;
            }
            pendingRoleChange = { userId: null, newRole: null, selectElem: null, oldRole: null };
            pendingDelete = { userId: null, rowElem: null };
        }

        document.getElementById('roleModalCancel').onclick = hideRoleModal;
        document.getElementById('roleModalBackdrop').onclick = hideRoleModal;

        document.getElementById('roleModalConfirm').onclick = async function () {
            // Смена роли
            if (pendingRoleChange.userId && pendingRoleChange.newRole) {
                try {
                    // Запрос на смену роли
                    const response = await fetch(`/User/${pendingRoleChange.userId}/role`, {
                        method: "PUT",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(pendingRoleChange.newRole)
                    });
                    if (response.ok) {
                        hideRoleModal();
                        // Обновить UI после смены роли (select обновится вместе с таблицей)
                        await loadUsers(currentPage);
                    } else {
                        alert("Ошибка при изменении роли");
                        hideRoleModal();
                    }
                } catch (error) {
                    alert("Ошибка при изменении роли");
                    hideRoleModal();
                }
                return;
            }
            // Удаление пользователя
            if (pendingDelete.userId) {
                try {
                    const response = await fetch(`/User/${pendingDelete.userId}`, { method: "DELETE" });
                    if (response.ok) {
                        if (pendingDelete.rowElem) pendingDelete.rowElem.remove();
                        hideRoleModal();
                    } else {
                        alert("Ошибка при удалении пользователя");
                        hideRoleModal();
                    }
                } catch (error) {
                    alert("Ошибка при удалении пользователя");
                    hideRoleModal();
                }
            }
        };

        // Фильтрация
        document.getElementById("userFilterForm").addEventListener("submit", function (e) {
            e.preventDefault();
            filter.name = document.getElementById("filterName").value;
            loadUsers(1);
        });

        document.getElementById('prevPageBtn').addEventListener('click', function () {
            if (currentPage > 1) loadUsers(currentPage - 1);
        });

        document.getElementById('nextPageBtn').addEventListener('click', function () {
            loadUsers(currentPage + 1);
        });

        document.addEventListener('DOMContentLoaded', () => {
            loadUsers();
        });
    </script>
}
