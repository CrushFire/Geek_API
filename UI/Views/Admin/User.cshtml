@{
    ViewData["Title"] = "Управление пользователями";
}

@section Body {
    <div class="admin-page-container">
        <div class="admin-header">
            <h1 class="admin-title">Управление пользователями</h1>
            @await Html.PartialAsync("_AdminNav")
        </div>

        <div class="admin-content-box">
            <div class="admin-filters">
                <div class="admin-filter-item">
                    <label class="form-label">Имя пользователя</label>
                    <input type="text" class="form-control" id="filterName" placeholder="Имя пользователя">
                </div>
                <div style="flex: 0 0 auto; align-self: flex-end;">
                    <button type="button" class="btn btn-primary" id="filterButton">
                        <i class="bi bi-funnel"></i> Фильтровать
                    </button>
                </div>
            </div>
        </div>

        <div class="admin-content-box">
            <div class="admin-table-wrapper">
                <table class="admin-table">
                    <thead>
                        <tr>
                            <th style="width: 80px">ID</th>
                            <th>Имя</th>
                            <th>Email</th>
                            <th style="width: 120px">Роль</th>
                            <th style="width: 100px">Действия</th>
                        </tr>
                    </thead>
                    <tbody id="usersTableBody">
                        <!-- Данные загружаются через JavaScript -->
                    </tbody>
                </table>
            </div>
            <div class="p-3 border-top d-flex justify-content-between align-items-center">
                <span id="pageInfo"></span>
                <div class="admin-actions">
                    <button id="prevPageBtn" class="btn btn-outline-secondary btn-sm">&larr; Назад</button>
                    <button id="nextPageBtn" class="btn btn-outline-secondary btn-sm">Вперёд &rarr;</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Модальное окно подтверждения -->
    <div id="userModalBackdrop" class="modal-backdrop-custom" style="display:none;"></div>
    <div id="userModal" class="modal-confirm-user" style="display:none;">
        <div class="modal-title" id="userModalTitle">Подтвердите действие</div>
        <div id="userModalText" class="mb-3"></div>
        <div class="modal-footer">
            <button id="userModalCancel" class="btn btn-secondary">Отмена</button>
            <button id="userModalConfirm" class="btn btn-primary">Подтвердить</button>
        </div>
    </div>
}

@section Script {
    <script>
        let currentPage = 1;
        let totalPages = 1;
        const pageSize = 20;
        let filter = {
            name: ""
        };

        // Для модального окна смены роли/удаления
        let pendingRoleChange = { userId: null, newRole: null, selectElem: null, oldRole: null };
        let pendingDelete = { userId: null, rowElem: null };

        async function loadUsers(page = 1) {
            try {
                const params = new URLSearchParams();
                params.append("name", filter.name);
                params.append("curPage", page);

                const response = await fetch(`/user-admin-list/?${params.toString()}`);
                const data = await response.json();

                const tbody = document.getElementById('usersTableBody');
                tbody.innerHTML = '';

                totalPages = data.length < pageSize && page === 1 ? 1 : (data.length === pageSize ? page + 1 : page);

                currentPage = page;

                data.forEach(user => {
                    const row = document.createElement("tr");
                    row.innerHTML = `
                        <td><a href="/userPage/${user.id}" target="_blank">${user.id}</a></td>
                        <td>${user.userName}</td>
                        <td>${user.email || ""}</td>
                        <td>
                            <select class="form-select form-select-sm role-select" data-user-id="${user.id}" data-current-role="${user.role || ''}">
                                <option value="User" ${user.role === "User" ? "selected" : ""}>User</option>
                                <option value="Admin" ${user.role === "Admin" ? "selected" : ""}>Admin</option>
                            </select>
                        </td>
                        <td class="action-buttons">
                            <button class="btn btn-sm btn-outline-danger" data-user-id="${user.id}" title="Удалить">
                                <i class="bi bi-trash"></i>
                            </button>
                        </td>
                    `;
                    tbody.appendChild(row);
                });

                // Назначаем обработчик на все select после рендера
                document.querySelectorAll('.role-select').forEach(select => {
                    select.addEventListener('focus', function () {
                        // Сохраняем роль при фокусе (до изменения)
                        this.dataset.lastRole = this.value;
                    });
                    select.addEventListener('change', function (e) {
                        const userId = this.getAttribute('data-user-id');
                        const oldRole = this.dataset.lastRole || this.getAttribute('data-current-role') || '';
                        const newRole = this.value;
                        // Если роль не изменилась, не показываем модалку
                        if (oldRole === newRole) {
                            // Вернуть select к старому значению
                            this.value = oldRole;
                            return;
                        }
                        showRoleModal(userId, newRole, this, oldRole);
                    });
                });

                // Обработчик для удаления
                document.querySelectorAll('.action-buttons .btn-outline-danger').forEach(btn => {
                    btn.addEventListener('click', function () {
                        const userId = this.getAttribute('data-user-id');
                        showDeleteModal(userId, this.closest('tr'));
                    });
                });

                document.getElementById('prevPageBtn').disabled = currentPage === 1;
                document.getElementById('nextPageBtn').disabled = data.length < pageSize;
                document.getElementById('pageInfo').textContent = `Страница ${currentPage}`;
            } catch (error) {
                console.error('Ошибка при загрузке пользователей:', error);
            }
        }

        // Модальное окно подтверждения смены роли
        function showRoleModal(userId, newRole, selectElem, oldRole) {
            pendingRoleChange = { userId, newRole, selectElem, oldRole };
            pendingDelete = { userId: null, rowElem: null };
            document.getElementById('userModalTitle').innerText = "Подтвердите смену роли";
            document.getElementById('userModalText').innerText = `Вы уверены, что хотите сменить роль пользователя #${userId} с "${oldRole}" на "${newRole}"?`;
            document.getElementById('userModalBackdrop').style.display = 'block';
            document.getElementById('userModal').style.display = 'block';
        }

        // Модальное окно подтверждения удаления
        function showDeleteModal(userId, rowElem) {
            pendingDelete = { userId, rowElem };
            pendingRoleChange = { userId: null, newRole: null, selectElem: null, oldRole: null };
            document.getElementById('userModalTitle').innerText = "Подтвердите удаление";
            document.getElementById('userModalText').innerText = `Вы уверены, что хотите удалить пользователя #${userId}?`;
            document.getElementById('userModalBackdrop').style.display = 'block';
            document.getElementById('userModal').style.display = 'block';
        }

        function hideRoleModal() {
            document.getElementById('userModalBackdrop').style.display = 'none';
            document.getElementById('userModal').style.display = 'none';
            // Вернуть select в исходное положение, если отменили смену роли
            if (pendingRoleChange.selectElem && pendingRoleChange.oldRole) {
                pendingRoleChange.selectElem.value = pendingRoleChange.oldRole;
            }
            pendingRoleChange = { userId: null, newRole: null, selectElem: null, oldRole: null };
            pendingDelete = { userId: null, rowElem: null };
        }

        document.getElementById('userModalCancel').onclick = hideRoleModal;
        document.getElementById('userModalBackdrop').onclick = hideRoleModal;

        document.getElementById('userModalConfirm').onclick = async function () {
            // Смена роли
            if (pendingRoleChange.userId && pendingRoleChange.newRole) {
                try {
                    // Запрос на смену роли
                    const response = await fetch(`/User/${pendingRoleChange.userId}/role`, {
                        method: "PUT",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(pendingRoleChange.newRole)
                    });
                    if (response.ok) {
                        hideRoleModal();
                        // Обновить UI после смены роли (select обновится вместе с таблицей)
                        await loadUsers(currentPage);
                    } else {
                        alert("Ошибка при изменении роли");
                        hideRoleModal();
                    }
                } catch (error) {
                    alert("Ошибка при изменении роли");
                    hideRoleModal();
                }
                return;
            }
            // Удаление пользователя
            if (pendingDelete.userId) {
                try {
                    const response = await fetch(`/User/${pendingDelete.userId}`, { method: "DELETE" });
                    if (response.ok) {
                        if (pendingDelete.rowElem) pendingDelete.rowElem.remove();
                        hideRoleModal();
                    } else {
                        alert("Ошибка при удалении пользователя");
                        hideRoleModal();
                    }
                } catch (error) {
                    alert("Ошибка при удалении пользователя");
                    hideRoleModal();
                }
            }
        };

        // Фильтрация
        document.getElementById("filterButton").addEventListener("click", function () {
            filter.name = document.getElementById("filterName").value;
            loadUsers(1);
        });

        document.getElementById('prevPageBtn').addEventListener('click', function () {
            if (currentPage > 1) loadUsers(currentPage - 1);
        });

        document.getElementById('nextPageBtn').addEventListener('click', function () {
            loadUsers(currentPage + 1);
        });

        document.addEventListener('DOMContentLoaded', () => {
            loadUsers();
        });
    </script>
}
