@using System.Text.Json
@{
    ViewData["Title"] = "Управление категориями";
    var language = ViewBag.Language;

    var filter = ViewBag.pageData.From("Filter");
    var postName = ViewBag.pageData.From("PostName");
    var communityName = ViewBag.pageData.From("CommunityName");
    var content = ViewBag.pageData.From("Content");
    var contentComment = ViewBag.pageData.From("ContentComment");
    var prev = ViewBag.pageData.From("Prev");
    var next = ViewBag.pageData.From("Next");
    var nameRu = ViewBag.pageData.From("NameRu");
    var nameEng = ViewBag.pageData.From("NameEng");
    var add = ViewBag.pageData.From("Add");
    var save = ViewBag.pageData.From("Save");
    var cancel = ViewBag.pageData.From("Cancel");
    var confDelete = Html.Raw(JsonSerializer.Serialize(ViewBag.pageData.From("ConfDelete")));
    var confMessage = Html.Raw(JsonSerializer.Serialize(ViewBag.pageData.From("ConfMessage")));
    var conf = ViewBag.pageData.From("Conf");
    var user = ViewBag.pageData.From("User");
    var post = ViewBag.pageData.From("Post");
    var community = ViewBag.pageData.From("Community");
    var category = ViewBag.pageData.From("Category");
    var comment = ViewBag.pageData.From("Comment");
    var titleUser = ViewBag.pageData.From("TitleUser");
    var titlePost = ViewBag.pageData.From("TitlePost");
    var titleCommunity = ViewBag.pageData.From("TitleCommunity");
    var titleCategory = ViewBag.pageData.From("TitleCategory");
    var titleComment = ViewBag.pageData.From("TitleComment");
    var userName = ViewBag.pageData.From("UserName");
    var addCategory = ViewBag.pageData.From("AddCategory");
}

@section Head {
    <style>
        .modal-backdrop-custom {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background-color: rgba(0, 0, 0, 0.4);
            z-index: 1040;
        }

        .modal-confirm-role {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 2rem;
            border-radius: 1rem;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
            z-index: 1050;
            width: 90%;
            max-width: 400px;
        }

        .modal-footer {
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
        }

        .modal-title {
            font-weight: bold;
            font-size: 1.2rem;
            margin-bottom: 1rem;
        }
    </style>
}

@section Body {
    <div class="app-wrapper">
        <div class="main-content">
            <div class="container py-4">
                <div class="card p-4 shadow" style="border-radius: 1rem;">
                @await Html.PartialAsync("_AdminNav")
                <div class="row mb-4">
                    <div class="col">
                        <h2 class="fw-bold">@titleCategory</h2>
                    </div>
                </div>

                <!-- Форма добавления категории -->
                <div class="add-category-form mb-4">
                    <h4 class="mb-3">@addCategory</h4>
                    <form id="addCategoryForm" class="row g-3">
                        <div class="col-md-5">
                            <input type="text" class="form-control" id="ruTitle" placeholder="@nameRu" required>
                        </div>
                        <div class="col-md-5">
                            <input type="text" class="form-control" id="engTitle" placeholder="@nameEng" required>
                        </div>
                        <div class="col-md-2">
                            <button type="submit" class="btn btn-primary w-100">@add</button>
                        </div>
                    </form>
                </div>

                <!-- Таблица категорий -->
                <div class="categories-table position-relative">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0" id="categoryTable">
                            <thead class="table-header">
                                <tr>
                                    <th>ID</th>
                                    <th>@(language == "ru" ? "Русское название" : "Russian Name")</th>
                                    <th>@(language == "ru" ? "Английское название" : "English Name")</th>
                                    <th>@(language == "ru" ? "Действия" : "Actions")</th>
                                </tr>
                            </thead>
                            <tbody id="categoriesTableBody">
                                <!-- Данные будут загружены через JavaScript -->
                            </tbody>
                        </table>
                    </div>
                    <div class="pagination-controls">
                        <button id="prevPageBtn" class="btn btn-outline-secondary btn-sm">&larr; @prev</button>
                        <span id="pageInfo" class="align-self-center"></span>
                        <button id="nextPageBtn" class="btn btn-outline-secondary btn-sm">@next &rarr;</button>
                    </div>
                    <div id="editBackdrop" class="edit-backdrop" style="display:none;"></div>
                </div>
                </div>
            </div>
        </div>
    </div>
}

@section Script {
    <script>
        let editingRowId = null;
        let currentPage = 1;
        let lastPage = false;

        // Загрузка категорий
        async function loadCategories(page = 1) {
            try {
                const response = await fetch(`/Category?curPage=${page}`);
                const data = await response.json();
                const tbody = document.getElementById('categoriesTableBody');
                tbody.innerHTML = '';

                lastPage = data.length < 20;
                currentPage = page;

                data.forEach(category => {
                    const catId = Number(category.id);
                    if (editingRowId === catId) {
                        // Режим редактирования строки
                        const row = `
                            <tr class="table-editing-row table-editing">
                                <td>${category.id}</td>
                                <td>
                                    <input type="text" class="form-control" id="editRuTitle" value="${escapeHtml(category.title)}" />
                                </td>
                                <td>
                                    <input type="text" class="form-control" id="editEngTitle" value="${escapeHtml(category.engTitle)}" />
                                </td>
                                <td class="action-buttons">
                                    <button class="btn btn-success btn-sm me-2" onclick="saveEditCategory(${catId})">@save</button>
                                    <button class="btn btn-secondary btn-sm" onclick="cancelEditCategory()">@cancel</button>
                                </td>
                            </tr>
                        `;
                        tbody.innerHTML += row;
                    } else {
                        const disabled = editingRowId !== null ? "disabled" : "";
                        // Экранируем кавычки для передачи в JS
                        const ruTitleEsc = escapeHtml(category.title).replace(/'/g, "\\'");
                        const engTitleEsc = escapeHtml(category.engTitle).replace(/'/g, "\\'");
                        const row = `
                            <tr>
                                <td>${category.id}</td>
                                <td>${escapeHtml(category.title)}</td>
                                <td>${escapeHtml(category.engTitle)}</td>
                                <td class="action-buttons">
                                    <button class="btn btn-sm btn-outline-primary" onclick="editCategory(${catId}, '${ruTitleEsc}', '${engTitleEsc}')" ${disabled}>
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                </td>
                            </tr>
                        `;
                        tbody.innerHTML += row;
                    }
                });

                // Показать/скрыть затемнение
                document.getElementById('editBackdrop').style.display = editingRowId !== null ? 'block' : 'none';

                // Пагинация
                document.getElementById('prevPageBtn').disabled = currentPage === 1 || editingRowId !== null;
                document.getElementById('nextPageBtn').disabled = lastPage || editingRowId !== null;
                document.getElementById('pageInfo').textContent = `Страница ${currentPage}`;
            } catch (error) {
                console.error('Ошибка при загрузке категорий:', error);
            }
        }

        // Экранирование для безопасной вставки в HTML-атрибуты
        function escapeHtml(text) {
            if (!text) return '';
            return text
                .replace(/&/g, "&amp;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;");
        }

        // Начать редактирование строки
        function editCategory(id, ruTitle, engTitle) {
            if (editingRowId !== null) return;
            editingRowId = Number(id);
            loadCategories();
        }

        // Отмена редактирования
        function cancelEditCategory() {
            editingRowId = null;
            loadCategories();
        }

        // Сохранить изменения
        async function saveEditCategory(id) {
            const ruTitle = document.getElementById('editRuTitle').value;
            const engTitle = document.getElementById('editEngTitle').value;

            try {
                const response = await fetch(`/Category?id=${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        ruTitle: ruTitle,
                        engTitle: engTitle
                    })
                });

                if (response.ok) {
                    editingRowId = null;
                    loadCategories();
                } else {
                    alert('Ошибка при обновлении категории');
                }
            } catch (error) {
                console.error('Ошибка:', error);
            }
        }

        // Добавление новой категории
        document.getElementById('addCategoryForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const ruTitle = document.getElementById('ruTitle').value;
            const engTitle = document.getElementById('engTitle').value;

            try {
                const response = await fetch('/Category', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        ruTitle: ruTitle,
                        engTitle: engTitle
                    })
                });

                if (response.ok) {
                    loadCategories();
                    document.getElementById('addCategoryForm').reset();
                } else {
                    alert('Ошибка при добавлении категории');
                }
            } catch (error) {
                console.error('Ошибка:', error);
            }
        });

        // Затемнение кликабельно только для отмены редактирования
        document.getElementById('editBackdrop').addEventListener('click', cancelEditCategory);

        document.getElementById('prevPageBtn').addEventListener('click', function() {
            if (currentPage > 1 && editingRowId === null) {
                loadCategories(currentPage - 1);
            }
        });

        document.getElementById('nextPageBtn').addEventListener('click', function() {
            if (!lastPage && editingRowId === null) {
                loadCategories(currentPage + 1);
            }
        });

        // Загрузка категорий при загрузке страницы
        document.addEventListener('DOMContentLoaded', () => {
            loadCategories();
        });
    </script>
}
