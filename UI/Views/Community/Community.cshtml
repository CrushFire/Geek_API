@using Core.Models.Community
@model CommunityResponse

@{
    var language = ViewBag.Language;
}

@section Head {

}

@section Body {
    <div class="app-wrapper">
        <div class="main-content">
            <div class="card shadow-lg mb-4 p-4 position-relative" style="border-radius: 1.5rem;" id="community-@Model.Id">

                <div id="subscribeBtnWrapper" style="position: absolute; top: 24px; right: 24px;"></div>

                <div class="d-flex align-items-center mb-4">
                    @if (!string.IsNullOrEmpty(Model.AvatarUrl))
                    {
                        <img src="@Model.AvatarUrl" alt="community avatar"
                             class="rounded-circle border-community me-4"
                             style="width: 100px; height: 100px; object-fit: cover;" />
                    }
                    else
                    {
                        <div class="rounded-circle border-community me-4 d-flex align-items-center justify-content-center"
                             style="width: 100px; height: 100px; background-color: #4D96FF; font-size: 2.5rem; font-weight: bold; color: white;">
                            @(Model.CommunityName?[0].ToString().ToUpper() ?? "?")
                        </div>
                    }

                    <div>
                        <h2 class="mb-1">@Model.CommunityName</h2>
                        <p class="text-muted mb-0">
                            Создано: @Model.CreateAt.ToString("dd.MM.yyyy HH:mm") • 👥 @Model.NumberOfMember участников
                        </p>
                    </div>
                </div>

                <p class="fs-5">@Html.Raw(Model.Description)</p>

                <div class="mb-3">
                    @{
                        var lang = ViewBag.Language as string ?? "ru";
                        var categories = lang == "ru" ? Model.CategoriesRu : Model.CategoriesEng;
                    }
                    @foreach (var cat in categories)
                    {
                        <span class="badge bg-primary me-2">#@cat</span>
                    }
                </div>
                <div id="dotsWrapper" class="position-relative d-inline-block" style="user-select:none;">
                    <div id="dotsButton" title="@((language == "ru") ? "Меню" : "Menu")"
                         style="position: absolute; right: 0; bottom: 0; cursor: pointer; font-size: 1.5rem; color: #444; user-select:none;">
                        &#8230; <!-- три точки -->
                    </div>
                    <div id="dotsMenu" class="bg-white border rounded shadow-sm"
                         style="display:none; position: absolute; right: 0; bottom: 24px; width: 100px; z-index: 1000; font-size: 0.9rem;">
                        <div id="deleteCommunity" style="padding: 8px 12px; cursor: pointer; color: #666; border-bottom: 1px solid #eee;">
                            @(language == "ru" ? "Удалить" : "Delete")
                        </div>
                        <div id="editCommunity" style="padding: 8px 12px; cursor: pointer; color: #666;">
                            @(language == "ru" ? "Изменить" : "Edit")
                        </div>
                    </div>
                </div>

                <hr />

                <div id="postSection" class="mt-4" data-community-id="@Model.Id">
                    <p>Загрузка постов...</p>
                </div>

                <!-- Модалка для увеличенного изображения -->
                <div id="imageModalSimple" class="image-modal" onclick="closeImageModal()">
                    <img id="modalImageSimple" class="image-modal-content" onclick="event.stopPropagation()" />
                </div>

                <div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="confirmDeleteLabel">@((language == "ru") ? "Подтверждение удаления" : "Delete Confirmation")</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body" id="confirmDeleteText">
                                @((language == "ru") ? "Вы уверены, что хотите удалить сообщество?" : "Are you sure you want to delete the community?")
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@((language == "ru") ? "Отмена" : "Cancel")</button>
                                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">@((language == "ru") ? "Да, удалить" : "Yes, delete")</button>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
}

@section Script {
<script>
    const communityId = @Model.Id; // id сообщества
    const userId = "@ViewBag.userIdToken";
    const language = "@(ViewBag.Language ?? "ru")";

    let userReactions = [];

    // Пагинация и состояния загрузки
    let curPage = 1;
    let loading = false;
    let reachedEnd = false;

    async function loadUserReactions() {
        try {
            const response = await fetch(`/take-reactions/${userId}`);
            userReactions = await response.json();
        } catch (err) {
            console.error("Ошибка загрузки реакций", err);
        }
    }

    function createPostElement(post) {
        const div = document.createElement('div');
        div.className = "card mb-3";

        const avatarUrl = post.author.images?.find(img => img.imageType === 'avatar')?.imageUrl || '';
        const avatarHtml = avatarUrl
            ? `<img src="${avatarUrl}" alt="avatar" class="rounded-circle me-2 border-user" style="width: 45px; height: 45px; object-fit: cover;">`
            : `<div class="rounded-circle me-2 border-user d-flex align-items-center justify-content-center" 
                   style="width: 45px; height: 45px; background-color: #4D96FF; font-weight: bold; font-size: 1.5rem; color: white;">
                   ${post.author.userName?.charAt(0).toUpperCase() || "?"}
               </div>`;

        const categoriesStr = Array.isArray(post.categories)
            ? post.categories.map(c => `#${c}`).join(" ")
            : "";

        const reaction = userReactions.find(r => Number(r.postId) === Number(post.id));
        const isUserLiked = reaction?.isLike === true;
        const isUserDisliked = reaction?.isLike === false;

        div.innerHTML = `
            <div class="card-body position-relative">
                <div style="position: absolute; top: 8px; right: 12px; color: #aaa; font-size: 0.85em;">
                    ${new Date(post.createAt).toLocaleDateString()} ${new Date(post.createAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                </div>
                <a href="/UserPage/${post.author.id}" class="d-flex align-items-center text-decoration-none text-dark mb-2">
                    ${avatarHtml}
                    <strong>${post.author.userName}</strong>
                </a>
                <h5>${post.title}</h5>
                <div class="post-images mb-3 d-flex flex-wrap gap-2">
                    ${Array.isArray(post.postImages) 
                        ? post.postImages.map(imgUrl => `
                            <img src="${imgUrl}" alt="post image" class="img-thumbnail post-img-thumb" style="max-width: 200px; cursor: pointer;"
                                 onclick="openImageModal('${imgUrl}')">
                        `).join("")
                        : ""}
                </div>
                <p>${post.content}</p>
                <span class="badge bg-primary me-1">${categoriesStr}</span>
                <p class="text-muted mt-2">
                    <button onclick="handleReaction(${post.id}, true)" class="btn btn-sm text-decoration-none ${isUserLiked ? 'user-liked' : ''}" id="like-${post.id}">💙 <span>${post.likes}</span></button>
                    /
                    <button onclick="handleReaction(${post.id}, false)" class="btn btn-sm text-decoration-none ${isUserDisliked ? 'user-disliked' : ''}" id="dislike-${post.id}">💧 <span>${post.dislikes}</span></button>  👀${post.views}
                    <a href="/Post/${post.id}" class="ms-4 text-muted text-decoration-none">
                        ${post.comments} 💬 Комментарии
                    </a>
                </p>
            </div>
        `;

        observeViews(post.id, div);

        return div;
    }

    async function loadCommunityPosts(page) {
        if (loading || reachedEnd) return;
        loading = true;

        const postSection = document.getElementById("postSection");
        if (page === 1) {
            postSection.innerHTML = "Загрузка постов...";
        }

        try {
            // Предполагаю, что у тебя есть API для постов по сообществу с пагинацией, например:
            // /posts/by-community?communityId=...&page=...
            const res = await fetch(`/by-community?communityId=${communityId}&page=${page}`);
            if (!res.ok) throw new Error("Ошибка загрузки постов");

            const posts = await res.json();

            if (posts.length === 0) {
                reachedEnd = true;
                if (page === 1) postSection.innerHTML = "<p>Постов нет.</p>";
                return;
            }

            if (page === 1) {
                postSection.innerHTML = "";
            }

            posts.forEach(post => {
                const postElem = createPostElement(post);
                postSection.appendChild(postElem);
            });

            curPage++;
        } catch (err) {
            console.error("Ошибка загрузки постов:", err);
            if (page === 1) {
                document.getElementById("postSection").innerHTML = "<p>Не удалось загрузить посты.</p>";
            }
        } finally {
            loading = false;
        }
    }

    // Автозагрузка при прокрутке страницы вниз
    window.addEventListener('scroll', () => {
        if (loading || reachedEnd) return;

        if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight - 300) {
            loadCommunityPosts(curPage);
        }
    });

    function observeViews(postId, div) {
        const observer = new IntersectionObserver(entries => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    fetch(`/increment-view/${postId}`, { method: 'POST' }).catch(e => console.error(e));
                    observer.disconnect();
                }
            });
        }, { threshold: 0.5 });

        observer.observe(div);
    }

    async function handleReaction(postId, isLike) {
        const reaction = userReactions.find(r => Number(r.postId) === postId);
        let newReaction;

        if (!reaction) {
            newReaction = { postId, userId, isLike };
        } else if (reaction.isLike === isLike) {
            newReaction = { postId, userId, isLike };
        } else {
            newReaction = { postId, userId, isLike };
        }

        try {
            const response = await fetch('/update-reactions', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(newReaction)
            });

            const result = await response.json();

            if (result.userReaction === null) {
                userReactions = userReactions.filter(r => r.postId !== postId);
            } else {
                const idx = userReactions.findIndex(r => r.postId === postId);
                if (idx >= 0) userReactions[idx].isLike = result.userReaction;
                else userReactions.push({ postId, userId, isLike: result.userReaction });
            }

            const likeBtn = document.getElementById(`like-${postId}`);
            const dislikeBtn = document.getElementById(`dislike-${postId}`);

            if (result.userReaction === true) {
                likeBtn.classList.add("user-liked");
                dislikeBtn.classList.remove("user-disliked");
            } else if (result.userReaction === false) {
                dislikeBtn.classList.add("user-disliked");
                likeBtn.classList.remove("user-liked");
            } else {
                likeBtn.classList.remove("user-liked");
                dislikeBtn.classList.remove("user-disliked");
            }

            likeBtn.querySelector("span").textContent = result.likes ?? likeBtn.querySelector("span").textContent;
            dislikeBtn.querySelector("span").textContent = result.dislikes ?? dislikeBtn.querySelector("span").textContent;

        } catch (err) {
            console.error("Ошибка обновления реакции:", err);
        }
    }

    // --- Кнопка подписки/отписки ---
    async function loadSubscriptionButton() {
        const container = document.getElementById("subscribeBtnWrapper");
        container.innerHTML = "Загрузка...";

        try {
            const roleResp = await fetch(`/check-role-community?userId=${userId}&communityId=${communityId}`);
            let role = "unSub";
            if (roleResp.ok) {
                const json = await roleResp.json();
                if (typeof json === "string") role = json;
                else if (json.role) role = json.role;
            }

            const dotsWrapper = document.getElementById("dotsWrapper");
            if (role === "creator") {
                    dotsWrapper.style.display = "inline-block";
                    container.innerHTML = `<p>${language === "ru" ? "Вы создатель сообщества" : "You are the community creator"}</p>`;
                    return;
            } else {
                    dotsWrapper.style.display = "none";
            }

            const isSubscribed = (role === "sub");

            container.innerHTML = `
                <button id="subscribe-btn" class="btn ${isSubscribed ? "btn-light" : "btn-primary"}"
                    style="min-width: 140px; font-size: 1rem; padding: 8px 16px; ${isSubscribed ? "color: #888; border-color: #ccc;" : "color: white;" }">
                    ${isSubscribed ? (language === "ru" ? "Отписаться" : "Unjoin") : (language === "ru" ? "Подписаться" : "Join")}
                </button>
            `;

            document.getElementById("subscribe-btn").addEventListener("click", async () => {
                const btn = document.getElementById("subscribe-btn");
                const currentlySubscribed = btn.classList.contains("btn-light");
                const url = currentlySubscribed ? `/unsub?userId=${userId}` : `/sub?userId=${userId}`;
                const method = currentlySubscribed ? "DELETE" : "POST";

                try {
                    const res = await fetch(url, {
                        method: method,
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(communityId)
                    });
                    const success = await res.json();

                    if (success === true) {
                        if (currentlySubscribed) {
                            btn.classList.remove("btn-light");
                            btn.classList.add("btn-primary");
                            btn.style.color = "white";
                            btn.textContent = language === "ru" ? "Подписаться" : "Join";
                        } else {
                            btn.classList.remove("btn-primary");
                            btn.classList.add("btn-light");
                            btn.style.color = "#888";
                            btn.style.borderColor = "#ccc";
                            btn.textContent = language === "ru" ? "Отписаться" : "Unjoin";
                        }
                    } else {
                        alert(language === "ru" ? "Ошибка при смене подписки" : "Subscription change error");
                    }
                } catch (e) {
                    console.error(e);
                    alert(language === "ru" ? "Ошибка сети" : "Network error");
                }
            });
        } catch (e) {
            console.error(e);
            container.innerHTML = `<p>${language === "ru" ? "Не удалось загрузить статус подписки" : "Failed to load subscription status"}</p>`;
        }
    }

    // --- Инициализация ---
    async function init() {
        await loadUserReactions();
        await loadCommunityPosts(curPage);
        await loadSubscriptionButton();
    }

    init();

    // --- Модальное окно для показа изображения поста ---
    window.openImageModal = function(imgUrl) {
        const modal = new bootstrap.Modal(document.getElementById('imageModal'));
        const imgTag = document.getElementById('modalImage');
        imgTag.src = imgUrl;
        modal.show();
    };

        document.addEventListener("DOMContentLoaded", () => {
            const dotsButton = document.getElementById("dotsButton");
            const dotsMenu = document.getElementById("dotsMenu");
            const deleteBtn = document.getElementById("deleteCommunity");
            const editBtn = document.getElementById("editCommunity");
            const confirmModal = new bootstrap.Modal(document.getElementById('confirmDeleteModal'));
            const confirmDeleteBtn = document.getElementById("confirmDeleteBtn");

            // Показывать/скрывать меню при клике по точкам
            dotsButton.addEventListener("click", (e) => {
                e.stopPropagation();
                dotsMenu.style.display = (dotsMenu.style.display === "block") ? "none" : "block";
            });

            // Скрывать меню при клике вне
            document.addEventListener("click", () => {
                dotsMenu.style.display = "none";
            });

            // Кнопка "Изменить" - редирект
            editBtn.addEventListener("click", () => {
                window.location.href = `/Community/Edit/${communityId}`;
            });

            // Кнопка "Удалить" - показать модалку
            deleteBtn.addEventListener("click", () => {
                dotsMenu.style.display = "none";
                confirmModal.show();
            });

            // Подтверждение удаления
            confirmDeleteBtn.addEventListener("click", async () => {
                confirmDeleteBtn.disabled = true;
                try {
                    const response = await fetch(`/Community/Delete/?communityId=${communityId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    if (response.ok) {
                        const result = await response.json();
                        if (result === true || result === "true") {
                            // Успешно удалено, редирект
                            window.location.href = `/Popular/${userId}`;
                        } else {
                            alert(language === "ru" ? "Ошибка при удалении сообщества" : "Failed to delete community");
                            confirmDeleteBtn.disabled = false;
                        }
                    } else {
                        alert(language === "ru" ? "Ошибка сети при удалении" : "Network error while deleting");
                        confirmDeleteBtn.disabled = false;
                    }
                } catch (e) {
                    alert(language === "ru" ? "Ошибка при удалении сообщества" : "Error deleting community");
                    confirmDeleteBtn.disabled = false;
                    console.error(e);
                }
            });
        });
</script>
}

