@{
    var language = ViewBag.Language ?? "ru";
    var query = Context.Request.Query["name"].ToString();
    var userIdToken = ViewBag.UserId ?? "0";
}

@section Head{

}

@section Body {
    <div class="app-wrapper">
        <div class="main-content">
            <div class="container">
                <div class="card p-4">
                    <div class="d-flex flex-wrap gap-2 mb-3">
                        <a class="btn btn-lg btn-primary text-white rounded-pill ms-auto" href="/Post/Search?name=@System.Net.WebUtility.UrlEncode(query)">Posts</a>
                        <a class="btn btn-lg text-white rounded-pill" style="background-color: #003366;" href="/Community/Search?name=@System.Net.WebUtility.UrlEncode(query)">Communities</a>
                        <a class="btn btn-lg btn-primary text-white rounded-pill" href="/User/Search?name=@System.Net.WebUtility.UrlEncode(query)">Users</a>
                        <button id="community-filter" class="btn btn-lg btn-secondary ms-auto">Фильтр</button>
                    </div>

                    <div id="communities"></div>

                    <!-- Модалка фильтрации -->
                    <div class="modal fade" id="filterModal" tabindex="-1" aria-labelledby="filterModalLabel" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-scrollable">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="filterModalLabel">Фильтрация постов</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
                                </div>
                                <div class="modal-body">
                                    <p>Тут будут параметры фильтрации (категории, дата, сортировка и т.п.)</p>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
                                    <button type="button" class="btn btn-primary">Применить</button>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>

    <div id="userToken" data-id="@userIdToken" style="display:none;"></div>
}

@section Script {
    <script>
        const language = "@language";
        const query = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(query));
        const userIdToken = document.getElementById("userToken").dataset.id;
        let page = 1;
        let communitiesLoading = false;
        let communitiesReachedEnd = false;

        // Для защиты от дублирования
        const renderedCommunityIds = new Set();

        async function loadCommunities() {
            if (communitiesLoading || communitiesReachedEnd) return;

            communitiesLoading = true;

            const container = document.getElementById("communities");
            if (page === 1) {
                container.innerHTML = "";
                renderedCommunityIds.clear();
            }

            try {
                const resp = await fetch(`/community-filter?name=${encodeURIComponent(query)}&curPage=${page}`);
                const communities = await resp.json();

                if (!communities || communities.length === 0) {
                    if (page === 1) {
                        document.getElementById("communities").innerHTML = `<p class="text-center text-muted">${language === "ru" ? "Сообщества не найдены." : "Community not found."}</p>`;
                    }
                    communitiesReachedEnd = true;
                    return;
                }

                for (const comm of communities) {
                    if (renderedCommunityIds.has(comm.id)) continue;
                    renderedCommunityIds.add(comm.id);

                    let role = "unSub";
                    try {
                        const roleResp = await fetch(`/check-role-community?userId=${userIdToken}&communityId=${comm.id}`);
                        if (roleResp.ok) {
                            role = await roleResp.json();
                        }
                    } catch (e) {
                        console.warn("Ошибка получения роли сообщества", e);
                    }

                    const isJoined = (role === "sub");
                    const isCreator = (role === "creator");
                    const categoriesStr = language === "ru"
                        ? (Array.isArray(comm.categoriesRu) ? comm.categoriesRu.map(c => `#${c}`).join(" ") : "")
                        : (Array.isArray(comm.categoriesEng) ? comm.categoriesEng.map(c => `#${c}`).join(" ") : "");

                    const avatarHtml = comm.avatarUrl
                        ? `<img src="${comm.avatarUrl}" alt="avatar" class="rounded-circle me-2 border-community" style="width: 45px; height: 45px; object-fit: cover;">`
                        : `<div class="rounded-circle me-2 border-community d-flex align-items-center justify-content-center" style="width: 45px; height: 45px; background-color: #4D96FF; font-weight: bold; font-size: 1.5rem; color: white;">
                                        ${comm.communityName.charAt(0).toUpperCase()}
                                   </div>`;

                    let buttonHtml = "";
                    if (!isCreator) {
                        buttonHtml = `
                                    <button class="btn ${isJoined ? 'btn-light' : 'btn-primary'} join-btn" data-community-id="${comm.id}"
                                        style="position: absolute; top: 28px; right: 20px; min-width: 120px; font-size: 1rem; padding: 8px 16px; ${isJoined ? 'color: #888; border-color: #ccc;' : 'color: white;'}">
                                        ${isJoined ? (language === "ru" ? "Отписаться" : "Unjoin") : (language === "ru" ? "Подписаться" : "Join")}
                                    </button>`;
                    }

                    const div = document.createElement("div");
                    div.className = "card mb-3 position-relative";
                    div.style.paddingRight = "140px";

                    div.innerHTML = `
                                <div class="card-body position-relative">
                                    <div class="d-flex align-items-center position-relative">
                                        <a href="/Community/${comm.id}" class="d-flex align-items-center text-decoration-none text-dark">
                                            ${avatarHtml}
                                            <strong>${comm.communityName}</strong>
                                        </a>
                                        ${buttonHtml}
                                    </div>
                                    <p>${comm.description || ''}</p>
                                    <span class="badge bg-primary me-1">${categoriesStr}</span>
                                    <p class="text-muted mb-0">
                                        <small>👥 ${language === "ru" ? "Подписчиков" : "Subscribers"}: ${comm.numberOfMember}</small>
                                    </p>
                                </div>`;

                    container.appendChild(div);
                }

                page++;
            } catch (error) {
                const container = document.getElementById("communities");
                container.innerHTML = `<p class="text-center text-danger">${language === "ru" ? "Ошибка загрузки сообществ." : "Failed to load communities."}</p>`;
                console.error(error);
            } finally {
                communitiesLoading = false;
            }
        }

        document.addEventListener("DOMContentLoaded", () => {
            loadCommunities();

            window.addEventListener("scroll", () => {
                if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight - 150) {
                    loadCommunities();
                }
            });

            document.getElementById("community-filter").addEventListener("click", () => {
                const modal = new bootstrap.Modal(document.getElementById("filterModal"));
                modal.show();
            });
        });

        document.addEventListener("click", async (event) => {
            if (!event.target.classList.contains("join-btn")) return;

            const button = event.target;
            const communityId = parseInt(button.dataset.communityId);
            const isSubscribed = button.classList.contains("btn-light");

            const url = isSubscribed ? `/unsub?userId=${userIdToken}` : `/sub?userId=${userIdToken}`;
            const method = isSubscribed ? "DELETE" : "POST";

            try {
                const res = await fetch(url, {
                    method: method,
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(communityId)
                });

                const success = await res.json();

                if (success === true) {
                    if (isSubscribed) {
                        button.classList.remove("btn-light");
                        button.classList.add("btn-primary");
                        button.textContent = language === "ru" ? "Подписаться" : "Join";
                        button.style.color = "white";
                        button.style.borderColor = "";
                    } else {
                        button.classList.remove("btn-primary");
                        button.classList.add("btn-light");
                        button.textContent = language === "ru" ? "Отписаться" : "Unjoin";
                        button.style.color = "#888";
                        button.style.borderColor = "#ccc";
                    }
                } else {
                    alert(language === "ru" ? "Ошибка подписки." : "Subscription failed.");
                }
            } catch (error) {
                console.error("Ошибка при подписке:", error);
                alert(language === "ru" ? "Ошибка сети." : "Network error.");
            }
        });
    </script>
}
