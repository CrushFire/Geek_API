@using Core.Models
@using System.Security.Claims
@model UserResponse

@{
    var language = ViewBag.Language;
    var avatarImage = Model.Images?.FirstOrDefault(i => i.ImageType == "avatar" && i.Id == Model.Id && i.EntityTarget == "User");
    var userIdToken = ViewBag.userIdToken;
}

@section Head {
}

@section Body {
    <div class="app-wrapper">
        <div class="main-content">
            <div class="main-box">
                <div class="row">
                    <!-- Аватар и Инфо -->
                    <div class="col-md-4 text-center" style="align-items: center; margin-top: 40px;">
                        @if (avatarImage != null && !string.IsNullOrEmpty(avatarImage.ImageUrl))
                        {
                            <a onclick="openImageModal('@avatarImage.ImageUrl')" style="cursor: pointer;">
                                <img src="@avatarImage.ImageUrl" class="rounded-circle mx-auto"
                                     style="width: 200px; height: 200px; object-fit: cover;" alt="Avatar" />
                            </a>
                        }
                        else
                        {
                            <div class="rounded-circle d-flex align-items-center justify-content-center mx-auto"
                                 style="width: 200px; height: 200px; font-size: 58px; font-weight: bold; color: white; background-color: #4D96FF;">
                                @Model.UserName.Substring(0, 1).ToUpper()
                            </div>
                        }

                        <div style="margin-top: 45px">
                            <div class="d-flex justify-content-around text-center">
                                <div>
                                    <h5>@Model.NumberOfLikes</h5>
                                    <p>Likes 💙</p>
                                </div>
                                <div>
                                    <h5>@Model.NumberOfPosts</h5>
                                    <p>Posts 📚</p>
                                </div>
                                <div>
                                    <h5>@Model.NumberOfComments</h5>
                                    <p>Comments 💬</p>
                                </div>
                                <div>
                                    <h5>@Model.NumberOfCommunities</h5>
                                    <p>Subscribes 👥</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <style>
                        .profile-info {
                            border-radius: 8px;
                            padding: 20px;
                            color: #0d3c91; /* темно-синий текст */
                            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                        }

                            .profile-info label {
                                font-weight: 700;
                                font-size: 1.1rem;
                                color: #1a4db7;
                                margin-bottom: 6px;
                                display: block;
                            }

                            .profile-info div.value {
                                background-color: #e7f1ff; /* чуть светлее фон для блока с текстом */
                                padding: 10px 15px;
                                border-radius: 6px;
                                color: black;
                                font-size: 1rem;
                                min-height: 40px;
                                white-space: pre-wrap; /* сохраняет переносы строк в описании */
                            }
                    </style>

                    <div class="col-md-8 profile-info">
                        <div class="mb-4">
                            <label>Username</label>
                            <div class="value">@Model.UserName</div>
                        </div>

                        <div class="mb-4">
                            <label>Description</label>
                            <div class="value" style="min-height: 150px;">@Model.Description</div>
                        </div>
                    </div>

                </div>

                <hr class="my-4" />

                <div class="d-flex justify-content-around mb-4">
                    <button class="btn btn-outline-secondary" onclick="loadLikedPosts()">User Liked Posts</button>
                    <button class="btn btn-outline-secondary" onclick="loadPublishedPosts()">User Posts</button>
                    <button class="btn btn-outline-secondary" onclick="loadSubscribedCommunities()">User Subscriptions</button>
                    <button class="btn btn-outline-secondary" onclick="loadOwnedCommunities()">User Communities</button>
                </div>

                <div class="post" id="posts">
                    
                </div>

                <div id="imageModalSimple" class="image-modal" onclick="closeImageModal()">
                    <img id="modalImageSimple" class="image-modal-content" onclick="event.stopPropagation()" />
                </div>
            </div>
        </div>
    </div>
    <div id='userToken' data-id="@userIdToken" style="display: none"></div>
}
@section Script {
    <script>

        const userId = @Model.Id;
        const language = "@language";
        const userIdToken = parseInt(document.getElementById('userToken').getAttribute('data-id'));
        let page = 1;
        let likedLoading = false;
        let likedReachedEnd = false;
        let userReactions = [];

        async function loadUserReactions() {
            try {
                const response = await fetch(`/take-reactions/${userIdToken}`);
                userReactions = await response.json();
            } catch (err) {
                console.error("Ошибка загрузки реакций", err);
            }
        }

        async function loadLikedPosts() {
            if (likedLoading) return;

            const container = document.getElementById("posts");
            container.innerHTML = "";
            page = 1;
            likedReachedEnd = false;

            likedLoading = true;
            await loadUserReactions();

            try {
                const response = await fetch(`/liked-posts/?userId=${userId}&curPage=${page}`);
                const posts = await response.json();

                if (!posts || posts.length === 0) {
                    likedReachedEnd = true;
                    const endMsg = document.createElement("p");
                    endMsg.className = "text-center text-muted";
                    endMsg.innerText = language === "ru" ? "Понравившиеся посты закончились." : "No more liked posts.";
                    container.appendChild(endMsg);
                    return;
                }

                posts.forEach(post => {
                    const categoriesStr = language === "ru"
                        ? (Array.isArray(post.categoriesRu) ? post.categoriesRu.map(c => `#${c}`).join(" ") : "")
                        : (Array.isArray(post.categoriesEng) ? post.categoriesEng.map(c => `#${c}`).join(" ") : "");

                    const isCommunityPost = !!post.communityName;
                    const name = isCommunityPost ? post.communityName : post.author.userName;
                    const avatarUrl = isCommunityPost ? post.communityAvatar : post.userAvatar;
                    const borderClass = isCommunityPost ? "border-community" : "border-user";

                    const reaction = userReactions.find(r => Number(r.postId) === Number(post.id));
                    const isUserLiked = reaction?.isLike === true;
                    const isUserDisliked = reaction?.isLike === false;

                    const div = document.createElement("div");
                    div.className = "card mb-3";

                    const avatarHtml = avatarUrl
                        ? `<img src="${avatarUrl}" alt="avatar" class="rounded-circle me-2 ${borderClass}" style="width: 45px; height: 45px; object-fit: cover;">`
                        : `<div class="rounded-circle me-2 ${borderClass} d-flex align-items-center justify-content-center" style="width: 45px; height: 45px; background-color: #4D96FF; font-weight: bold; font-size: 1.5rem; color: white;">
                               ${name.charAt(0).toUpperCase()}
                           </div>`;

                    div.innerHTML = `
                        <div class="card-body position-relative">
                            <div style="position: absolute; top: 8px; right: 12px; color: #aaa; font-size: 0.85em;">
                                ${new Date(post.createAt).toLocaleDateString()} ${new Date(post.createAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                            </div>

                            <div class="d-flex align-items-center mb-3">
                                <a href="${isCommunityPost ? `/Community/${post.communityId}` : `/UserPage/${post.author.id}`}" class="d-flex align-items-center text-decoration-none text-dark">
                                    ${avatarHtml}
                                    <strong>${name}</strong>
                                </a>
                            </div>

                            <h5>${post.title}</h5>
                            <div class="post-images mb-3 d-flex flex-wrap gap-2">
                                ${post.postImages.map((imgUrl) => `
                                    <img src="${imgUrl}" alt="post image" class="img-thumbnail post-img-thumb"
                                         style="max-width: 200px; cursor: pointer;"
                                         onclick="openImageModal('${imgUrl}')">`).join("")}
                            </div>
                            <p>${post.content}</p>
                            <span class="badge bg-primary me-1">${categoriesStr}</span>
                            <p class="text-muted mt-2">
                                <button onclick="handleReaction(${post.id}, true)" class="btn btn-sm text-decoration-none ${isUserLiked ? 'user-liked' : ''}" id="like-${post.id}">💙 <span>${post.likes}</span></button>
                                /
                                <button onclick="handleReaction(${post.id}, false)" class="btn btn-sm text-decoration-none ${isUserDisliked ? 'user-disliked' : ''}" id="dislike-${post.id}">💧 <span>${post.dislikes}</span></button>
                                👀${post.views}
                                <a href="/Post/${post.id}" class="ms-4 text-muted text-decoration-none">
                                    ${post.comments} 💬 ${language === "ru" ? "Комментарии" : "Comments"}
                                </a>
                            </p>
                        </div>
                    `;

                    observeViews(post.id, div);//ломает эта залупа
                    container.appendChild(div);
                });

                page++;
            } catch (err) {
                container.innerHTML = `<p>${language === "ru" ? "Ошибка загрузки понравившихся постов." : "Failed to load liked posts."}</p>`;
                console.error(err);
            } finally {
                likedLoading = false;
            }
        }

        async function loadPublishedPosts() {
            if (likedLoading) return;

            const container = document.getElementById("posts");
            container.innerHTML = "";
            page = 1;
            likedReachedEnd = false;

            likedLoading = true;
            await loadUserReactions();

            try {
                const response = await fetch(`/published-posts/?userId=${userId}&curPage=${page}`);
                const posts = await response.json();

                if (!posts || posts.length === 0) {
                    likedReachedEnd = true;
                    const endMsg = document.createElement("p");
                    endMsg.className = "text-center text-muted";
                    endMsg.innerText = language === "ru" ? "Понравившиеся посты закончились." : "No more liked posts.";
                    container.appendChild(endMsg);
                    return;
                }

                posts.forEach(post => {
                    const categoriesStr = language === "ru"
                        ? (Array.isArray(post.categoriesRu) ? post.categoriesRu.map(c => `#${c}`).join(" ") : "")
                        : (Array.isArray(post.categoriesEng) ? post.categoriesEng.map(c => `#${c}`).join(" ") : "");

                    const isCommunityPost = !!post.communityName;
                    const name = isCommunityPost ? post.communityName : post.author.userName;
                    const avatarUrl = isCommunityPost ? post.communityAvatar : post.userAvatar;
                    const borderClass = isCommunityPost ? "border-community" : "border-user";

                    const reaction = userReactions.find(r => Number(r.postId) === Number(post.id));
                    const isUserLiked = reaction?.isLike === true;
                    const isUserDisliked = reaction?.isLike === false;

                    const div = document.createElement("div");
                    div.className = "card mb-3";

                    const avatarHtml = avatarUrl
                        ? `<img src="${avatarUrl}" alt="avatar" class="rounded-circle me-2 ${borderClass}" style="width: 45px; height: 45px; object-fit: cover;">`
                        : `<div class="rounded-circle me-2 ${borderClass} d-flex align-items-center justify-content-center" style="width: 45px; height: 45px; background-color: #4D96FF; font-weight: bold; font-size: 1.5rem; color: white;">
                                       ${name.charAt(0).toUpperCase()}
                                   </div>`;

                    div.innerHTML = `
                                <div class="card-body position-relative">
                                    <div style="position: absolute; top: 8px; right: 12px; color: #aaa; font-size: 0.85em;">
                                        ${new Date(post.createAt).toLocaleDateString()} ${new Date(post.createAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                                    </div>

                                    <div class="d-flex align-items-center mb-3">
                                        <a href="${isCommunityPost ? `/Community/${post.communityId}` : `/UserPage/${post.author.id}`}" class="d-flex align-items-center text-decoration-none text-dark">
                                            ${avatarHtml}
                                            <strong>${name}</strong>
                                        </a>
                                    </div>

                                    <h5>${post.title}</h5>
                                    <div class="post-images mb-3 d-flex flex-wrap gap-2">
                                        ${post.postImages.map((imgUrl) => `
                                            <img src="${imgUrl}" alt="post image" class="img-thumbnail post-img-thumb"
                                                 style="max-width: 200px; cursor: pointer;"
                                                 onclick="openImageModal('${imgUrl}')">`).join("")}
                                    </div>
                                    <p>${post.content}</p>
                                    <span class="badge bg-primary me-1">${categoriesStr}</span>
                                    <p class="text-muted mt-2">
                                        <button onclick="handleReaction(${post.id}, true)" class="btn btn-sm text-decoration-none ${isUserLiked ? 'user-liked' : ''}" id="like-${post.id}">💙 <span>${post.likes}</span></button>
                                        /
                                        <button onclick="handleReaction(${post.id}, false)" class="btn btn-sm text-decoration-none ${isUserDisliked ? 'user-disliked' : ''}" id="dislike-${post.id}">💧 <span>${post.dislikes}</span></button>
                                        👀${post.views}
                                        <a href="/Post/${post.id}" class="ms-4 text-muted text-decoration-none">
                                            ${post.comments} 💬 ${language === "ru" ? "Комментарии" : "Comments"}
                                        </a>
                                    </p>
                                </div>
                            `;

                    observeViews(post.id, div);//ломает эта залупа
                    container.appendChild(div);
                });

                page++;
            } catch (err) {
                container.innerHTML = `<p>${language === "ru" ? "Ошибка загрузки понравившихся постов." : "Failed to load liked posts."}</p>`;
                console.error(err);
            } finally {
                likedLoading = false;
            }
        }

        function observeViews(postId, div) {
            const observer = new IntersectionObserver(entries => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        fetch(`/increment-view/${postId}`, { method: 'POST' });
                        observer.disconnect();
                    }
                });
            }, { threshold: 0.5 });

            observer.observe(div);
        }

        async function handleReaction(postId, isLike, userId = userIdToken) {
            const reaction = userReactions.find(r => Number(r.postId) === Number(postId));
            let newReaction;

            if (!reaction) {
                newReaction = { postId, userId, isLike };
            } else if (reaction.isLike === isLike) {
                // Нажал то же самое → снять реакцию
                newReaction = { postId, userId, isLike };
            } else {
                // Смена реакции
                newReaction = { postId, userId, isLike };
            }

            try {
                const response = await fetch('/update-reactions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(newReaction)
                });

                const result = await response.json();

                // Обновление userReactions
                if (result.userReaction === null) {
                    userReactions = userReactions.filter(r => r.postId !== postId);
                } else {
                    const index = userReactions.findIndex(r => r.postId === postId);
                    if (index >= 0) {
                        userReactions[index].isLike = result.userReaction;
                    } else {
                        userReactions.push({ postId, userIdToken, isLike: result.userReaction });
                    }
                }

                // Обновление отображения
                const likeBtn = document.getElementById(`like-${postId}`);
                const dislikeBtn = document.getElementById(`dislike-${postId}`);

                likeBtn.classList.toggle("user-liked", result.userReaction === true);
                dislikeBtn.classList.toggle("user-disliked", result.userReaction === false);

                likeBtn.querySelector("span").innerText = result.likes;
                dislikeBtn.querySelector("span").innerText = result.dislikes;

            } catch (err) {
                console.error("Ошибка обновления реакции", err);
            }
        }

        function openImageModal(url) {
            const modal = document.getElementById("imageModalSimple");
            const modalImg = document.getElementById("modalImageSimple");
            modalImg.src = url;
            modal.style.display = "flex";
        }

        function closeImageModal() {
            const modal = document.getElementById("imageModalSimple");
            modal.style.display = "none";
        }
        // Вызов при загрузке страницы
        document.addEventListener("DOMContentLoaded", async () => {
            await loadUserReactions();
            await loadLikedPosts(); // <-- Вызов загрузки постов
        });

        let communitiesLoading = false;
        let communitiesReachedEnd = false;

        async function loadSubscribedCommunities() {
            if (communitiesLoading) return;

            const container = document.getElementById("posts");
            container.innerHTML = "";
            page = 1;
            communitiesReachedEnd = false;

            communitiesLoading = true;

            try {
                const response = await fetch(`/subscribed-communities/?userId=${userId}&curPage=${page}`);
                const communities = await response.json();

                if (!communities || communities.length === 0) {
                    communitiesReachedEnd = true;
                    const endMsg = document.createElement("p");
                    endMsg.className = "text-center text-muted";
                    endMsg.innerText = language === "ru" ? "Подписки закончились." : "No more subscriptions.";
                    container.appendChild(endMsg);
                    return;
                }

                for (const comm of communities) {
                    const response = await fetch(`/check-role-community/?userId=${userIdToken}&communityId=${comm.id}`);
                    const role = await response.json();

                    const isJoined = (role === "sub");
                    const isCreator = (role === "creator");
                    const categoriesStr = language === "ru"
                        ? (Array.isArray(comm.categoriesRu) ? comm.categoriesRu.map(c => `#${c}`).join(" ") : "")
                        : (Array.isArray(comm.categoriesEng) ? comm.categoriesEng.map(c => `#${c}`).join(" ") : "");

                    const avatarHtml = comm.avatarUrl
                        ? `<img src="${comm.avatarUrl}" alt="avatar" class="rounded-circle me-2 border-community" style="width: 45px; height: 45px; object-fit: cover;">`
                        : `<div class="rounded-circle me-2 border-community d-flex align-items-center justify-content-center" style="width: 45px; height: 45px; background-color: #4D96FF; font-weight: bold; font-size: 1.5rem; color: white;">
                   ${comm.communityName.charAt(0).toUpperCase()}
               </div>`;

                    let buttonHtml = "";
                    if (!isCreator) {
                        buttonHtml = `
                <button class="btn ${isJoined ? 'btn-light' : 'btn-primary'} join-btn" data-community-id="${comm.id}"
                    style="position: absolute; top: 28px; right: 40px; width: 90px; ${isJoined ? 'color: #888; border-color: #ccc;' : 'color: white;'}">
                    ${isJoined ? 'Unjoin' : 'Join'}
                </button>`;
                    }

                    const div = document.createElement("div");
                    div.className = "card mb-3";

                    div.innerHTML = `
                <div class="card-body position-relative">
                    <div style="position: absolute; top: 8px; right: 12px; color: #aaa; font-size: 0.85em;">
                        ${new Date(comm.createAt).toLocaleDateString()} ${new Date(comm.createAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                    </div>
                    <div class="d-flex align-items-center position-relative">
                        <a href="/Community/${comm.id}" class="d-flex align-items-center text-decoration-none text-dark">
                            ${avatarHtml}
                            <strong>${comm.communityName}</strong>
                        </a>
                        ${buttonHtml}
                    </div>
                    <p>${comm.description || ''}</p>
                    <span class="badge bg-primary me-1">${categoriesStr}</span>
                    <p class="text-muted mb-0">
                        <small>👥 Подписчиков: ${comm.numberOfMember}</small>
                    </p>
                </div>
            `;

                    container.appendChild(div);
                }

                page++;
            } catch (err) {
                container.innerHTML = `<p>${language === "ru" ? "Ошибка загрузки сообществ." : "Failed to load communities."}</p>`;
            } finally {
                communitiesLoading = false;
            }
        }

        document.addEventListener("click", async function (event) {
            if (event.target.classList.contains("join-btn")) {
                const button = event.target;
                const communityId = parseInt(button.dataset.communityId);
                const isSubscribed = button.classList.contains("btn-light"); // серая кнопка = подписан

                // если подписан → отпишем, если не подписан → подпишем
                const url = isSubscribed
                    ? `/unsub?userId=${userIdToken}`
                    : `/sub?userId=${userIdToken}`;
                const method = isSubscribed ? "DELETE" : "POST";

                try {
                    const res = await fetch(url, {
                        method: method,
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify(communityId)
                    });

                    const success = await res.json();

                    if (success === true) {
                        if (isSubscribed) {
                            // Был подписан → теперь отписался
                            button.classList.remove("btn-light");
                            button.classList.add("btn-primary");
                            button.textContent = "Join";
                            button.style.color = "white";
                            button.style.borderColor = "";
                        } else {
                            // Был не подписан → теперь подписался
                            button.classList.remove("btn-primary");
                            button.classList.add("btn-light");
                            button.textContent = "Unjoin";
                            button.style.color = "#888";
                            button.style.borderColor = "#ccc";
                        }
                    } else {
                        alert(language === "ru" ? "Ошибка подписки." : "Subscription failed.");
                    }
                } catch (error) {
                    console.error("Ошибка при подписке:", error);
                    alert(language === "ru" ? "Ошибка сети." : "Network error.");
                }
            }
        });




        async function loadOwnedCommunities() {
            if (communitiesLoading) return;

            const container = document.getElementById("posts");
            container.innerHTML = "";
            page = 1;
            communitiesReachedEnd = false;

            communitiesLoading = true;

            try {
                const response = await fetch(`/created-communities/?userId=${userId}&curPage=${page}`);
                const communities = await response.json();

                if (!communities || communities.length === 0) {
                    communitiesReachedEnd = true;
                    const endMsg = document.createElement("p");
                    endMsg.className = "text-center text-muted";
                    endMsg.innerText = language === "ru" ? "Сообщества закончились." : "No more communities.";
                    container.appendChild(endMsg);
                    return;
                }

                for (const comm of communities) {
                    // Получаем роль пользователя в сообществе
                    const roleResponse = await fetch(`/check-role-community/?userId=${userIdToken}&communityId=${comm.id}`);
                    const role = await roleResponse.json();

                    const isJoined = (role === "sub");
                    const isCreator = (role === "creator");

                    const categoriesStr = language === "ru"
                        ? (Array.isArray(comm.categoriesRu) ? comm.categoriesRu.map(c => `#${c}`).join(" ") : "")
                        : (Array.isArray(comm.categoriesEng) ? comm.categoriesEng.map(c => `#${c}`).join(" ") : "");

                    const avatarHtml = comm.avatarUrl
                        ? `<img src="${comm.avatarUrl}" alt="avatar" class="rounded-circle me-2 border-community" style="width: 45px; height: 45px; object-fit: cover;">`
                        : `<div class="rounded-circle me-2 border-community d-flex align-items-center justify-content-center" style="width: 45px; height: 45px; background-color: #4D96FF; font-weight: bold; font-size: 1.5rem; color: white;">
                               ${comm.communityName.charAt(0).toUpperCase()}
                           </div>`;

                    // Кнопка только если не creator
                    let buttonHtml = "";
                    if (!isCreator) {
                        buttonHtml = `
                            <button class="btn ${isJoined ? 'btn-light' : 'btn-primary'} join-btn" data-community-id="${comm.id}"
                                style="position: absolute; top: 28px; right: 40px; width: 90px; ${isJoined ? 'color: #888; border-color: #ccc;' : 'color: white;'}">
                                ${isJoined ? 'Unjoin' : 'Join'}
                            </button>`;
                    }

                    const div = document.createElement("div");
                    div.className = "card mb-3";

                    div.innerHTML = `
                        <div class="card-body position-relative">
                            <div style="position: absolute; top: 8px; right: 12px; color: #aaa; font-size: 0.85em;">
                                ${new Date(comm.createAt).toLocaleDateString()} ${new Date(comm.createAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                            </div>
                            <div class="d-flex align-items-center position-relative">
                                <a href="/Community/${comm.id}" class="d-flex align-items-center text-decoration-none text-dark mb-2">
                                    ${avatarHtml}
                                    <strong>${comm.communityName}</strong>
                                </a>
                                ${buttonHtml}
                            </div>
                            <p>${comm.description || ''}</p>
                            <span class="badge bg-primary me-1">${categoriesStr}</span>
                            <p class="text-muted mb-0">
                                <small>👥 Подписчиков: ${comm.numberOfMember}</small>
                            </p>
                        </div>
                    `;

                    container.appendChild(div);
                }

                page++;
            } catch (err) {
                container.innerHTML = `<p>${language === "ru" ? "Ошибка загрузки сообществ." : "Failed to load communities."}</p>`;
                console.error(err);
            } finally {
                communitiesLoading = false;
            }
        }

    </script>
}
