@using Core.Models
@using System.Text.Json
@model UserResponse

@{
    var errors = ViewBag.Errors as IEnumerable<string>;

    var language = ViewBag.Language;
    var avatarImage = Model.Images?.FirstOrDefault(i => i.ImageType == "avatar" && i.EntityId == Model.Id && i.EntityTarget == "User");

    var username = ViewBag.pageData.From("Username");
    var description = ViewBag.pageData.From("Description");
    var avatar = ViewBag.pageData.From("Avatar");
    var selectFile = ViewBag.pageData.From("SelectFile");
    var notFile = ViewBag.pageData.From("NotFile");
    var like = ViewBag.pageData.From("Like");
    var comment = ViewBag.pageData.From("Comment");
    var subscribe = ViewBag.pageData.From("Subscribe");
    var likePost = ViewBag.pageData.From("LikePost");
    var myPost = ViewBag.pageData.From("MyPost");
    var mySubscribe = ViewBag.pageData.From("MySubscribe");
    var myCommunity = ViewBag.pageData.From("MyCommunity");
    var join = Html.Raw(JsonSerializer.Serialize(ViewBag.pageData.From("Join")));
    var joined = Html.Raw(JsonSerializer.Serialize(ViewBag.pageData.From("Joined")));
    var saveChange = ViewBag.pageData.From("SaveChange");
    var profileUpdate = Html.Raw(JsonSerializer.Serialize(ViewBag.pageData.From("ProfileUpdate")));
    var sub = ViewBag.pageData.From("Sub");
}

@section Head {
    <style>
        .hidden-file-input {
            display: none;
        }
    </style>
}

@section Body {
    <div class="app-wrapper">
        <div class="main-content">
            <div class="main-box">
                <div class="row">
                    <!-- Аватар и Инфо -->
                    <div class="col-md-4 text-center" style="align-items: center; margin-top: 40px;">
                        @if (avatarImage != null && !string.IsNullOrEmpty(avatarImage.ImageUrl))
                        {
                            <a onclick="openImageModal('@avatarImage.ImageUrl')" style="cursor: pointer;">
                                <img src="@avatarImage.ImageUrl" class="rounded-circle mx-auto"
                                     style="width: 200px; height: 200px; object-fit: cover;" alt="Avatar" />
                            </a>
                        }
                        else
                        {
                            <div class="rounded-circle d-flex align-items-center justify-content-center mx-auto"
                                 style="width: 200px; height: 200px; font-size: 48px; font-weight: bold; color: white; background-color: #4D96FF;">
                                @Model.UserName.Substring(0, 1).ToUpper()
                            </div>
                        }

                        <div style="margin-top: 45px">
                            <div class="d-flex justify-content-around text-center">
                                <div>
                                    <h5>@Model.NumberOfLikes</h5>
                                    <p>@like 💙</p>
                                </div>
                                <div>
                                    <h5>@Model.NumberOfPosts</h5>
                                    <p>@myPost 📚</p>
                                </div>
                                <div>
                                    <h5>@Model.NumberOfComments</h5>
                                    <p>@comment 💬</p>
                                </div>
                                <div>
                                    <h5>@Model.NumberOfCommunities</h5>
                                    <p>@subscribe 👥</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Форма редактирования -->
                    <div class="col-md-8">
                        <form id="profileForm" asp-action="UpdateProfile" asp-controller="Home" method="post" enctype="multipart/form-data">
                            <input type="hidden" name="Id" value="@Model.Id" />

                            <div class="mb-3">
                                <label for="Username" class="form-label">@username</label>
                                <input type="text" class="form-control" id="Username" name="UserName" value="@Model.UserName" />
                            </div>

                            <div class="mb-3">
                                <label for="Description" class="form-label">@description</label>
                                <textarea class="form-control" id="Description" name="Description" rows="3">@Model.Description</textarea>
                            </div>

                            <div class="mb-3">
                                <label for="Avatar" class="form-label">@avatar</label>

                                <!-- Кастомная кнопка -->
                                <div class="input-group">
                                    <input type="file" id="Avatar" name="Avatar" class="hidden-file-input" onchange="updateFileName()" />
                                    <button type="button" class="btn btn-success" onclick="document.getElementById('Avatar').click()">
                                        @selectFile
                                    </button>
                                    <span class="form-control" id="fileLabel">@notFile</span>
                                </div>
                            </div>


                            <button type="submit" class="btn btn-primary">@saveChange</button>
                        </form>
                    </div>
                </div>

                <hr class="my-4" />

                <div class="d-flex justify-content-around mb-4">
                    <button class="btn btn-outline-secondary" onclick="loadLikedPosts()">@likePost</button>
                    <button class="btn btn-outline-secondary" onclick="loadPublishedPosts()">@myPost</button>
                    <button class="btn btn-outline-secondary" onclick="loadSubscribedCommunities()">@mySubscribe</button>
                    <button class="btn btn-outline-secondary" onclick="loadOwnedCommunities()">@myCommunity</button>
                </div>

                <div class="post" id="posts">
                    
                </div>

                <div id="imageModalSimple" class="image-modal" onclick="closeImageModal()">
                    <img id="modalImageSimple" class="image-modal-content" onclick="event.stopPropagation()" />
                </div>
            </div>
        </div>
    </div>
}

@section Script {
    <script>
        const errorMessage = "@language" == "ru" ? "Пользователь с таким ником уже существует" : "User with name yet exists"
        document.getElementById("profileForm").addEventListener("submit", async function (e) {
            e.preventDefault();

            const form = e.target;
            const formData = new FormData(form);

            var profileUpdate = @profileUpdate;


                function updateFileName() {
                    const input = document.getElementById("Avatar");
                    const label = document.getElementById("fileLabel");
                    label.textContent = input.files.length > 0 ? input.files[0].name : "@notFile";
                }

            try {
                const response = await fetch("/UpdateProfile", {
                    method: "POST", // <-- важно
                    body: formData
                });

                if (!response.ok) throw new Error("Ошибка сервера");

                const result = await response.json();

                if (result.userName) {
                    document.getElementById("Username").value = result.userName;
                }

                if (result.description !== undefined) {
                    document.getElementById("Description").value = result.description;
                }

                alert(profileUpdate);
            } catch (error) {
                alert(errorMessage);
            }
        });

        const userId = @Model.Id;
        const language = "@language";
        let page = 1;
        let likedLoading = false;
        let likedReachedEnd = false;
        let userReactions = [];

        async function loadUserReactions() {
            try {
                const response = await fetch(`/take-reactions/${userId}`);
                userReactions = await response.json();
            } catch (err) {
                console.error("Ошибка загрузки реакций", err);
            }
        }

        async function loadLikedPosts() {
            if (likedLoading) return;

            const container = document.getElementById("posts");
            container.innerHTML = "";
            page = 1;
            likedReachedEnd = false;

            likedLoading = true;
            await loadUserReactions();

            try {
                const response = await fetch(`/liked-posts/?userId=${userId}&curPage=${page}`);
                const posts = await response.json();

                if (!posts || posts.length === 0) {
                    likedReachedEnd = true;
                    const endMsg = document.createElement("p");
                    endMsg.className = "text-center text-muted";
                    endMsg.innerText = language === "ru" ? "Понравившиеся посты закончились." : "No more liked posts.";
                    container.appendChild(endMsg);
                    return;
                }

                posts.forEach(post => {
                    const categoriesStr = language === "ru"
                        ? (Array.isArray(post.categoriesRu) ? post.categoriesRu.map(c => `#${c}`).join(" ") : "")
                        : (Array.isArray(post.categoriesEng) ? post.categoriesEng.map(c => `#${c}`).join(" ") : "");

                    const isCommunityPost = !!post.communityName;
                    const name = isCommunityPost ? post.communityName : post.author.userName;
                    const avatarUrl = isCommunityPost ? post.communityAvatar : post.userAvatar;
                    const borderClass = isCommunityPost ? "border-community" : "border-user";

                    const reaction = userReactions.find(r => Number(r.postId) === Number(post.id));
                    const isUserLiked = reaction?.isLike === true;
                    const isUserDisliked = reaction?.isLike === false;

                    const div = document.createElement("div");
                    div.className = "card mb-3";

                    const avatarHtml = avatarUrl
                        ? `<img src="${avatarUrl}" alt="avatar" class="rounded-circle me-2 ${borderClass}" style="width: 45px; height: 45px; object-fit: cover;">`
                        : `<div class="rounded-circle me-2 ${borderClass} d-flex align-items-center justify-content-center" style="width: 45px; height: 45px; background-color: #4D96FF; font-weight: bold; font-size: 1.5rem; color: white;">
                               ${name.charAt(0).toUpperCase()}
                           </div>`;

                    div.innerHTML = `
                        <div class="card-body position-relative">
                            <div style="position: absolute; top: 8px; right: 12px; color: #aaa; font-size: 0.85em;">
                                ${new Date(post.createAt).toLocaleDateString()} ${new Date(post.createAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                            </div>

                            <div class="d-flex align-items-center mb-3">
                                <a href="${isCommunityPost ? `/Community/${post.communityId}` : `/UserPage/${post.author.id}`}" class="d-flex align-items-center text-decoration-none text-dark">
                                    ${avatarHtml}
                                    <strong>${name}</strong>
                                </a>
                            </div>

                            <h5>${post.title}</h5>
                            <div class="post-images mb-3 d-flex flex-wrap gap-2">
                                ${post.postImages.map((imgUrl) => `
                                    <img src="${imgUrl}" alt="post image" class="img-thumbnail post-img-thumb"
                                         style="max-width: 200px; cursor: pointer;"
                                         onclick="openImageModal('${imgUrl}')">`).join("")}
                            </div>
                            <p>${post.content}</p>
                            <span class="badge bg-primary me-1">${categoriesStr}</span>
                            <p class="text-muted mt-2">
                                <button onclick="handleReaction(${post.id}, true)" class="btn btn-sm text-decoration-none ${isUserLiked ? 'user-liked' : ''}" id="like-${post.id}">💙 <span>${post.likes}</span></button>
                                /
                                <button onclick="handleReaction(${post.id}, false)" class="btn btn-sm text-decoration-none ${isUserDisliked ? 'user-disliked' : ''}" id="dislike-${post.id}">💧 <span>${post.dislikes}</span></button>
                                👀${post.views}
                                <a href="/Post/${post.id}" class="ms-4 text-muted text-decoration-none">
                                    ${post.comments} 💬 ${language === "ru" ? "Комментарии" : "Comments"}
                                </a>
                            </p>
                        </div>
                    `;

                    observeViews(post.id, div);//ломает эта залупа
                    container.appendChild(div);
                });

                page++;
            } catch (err) {
                container.innerHTML = `<p>${language === "ru" ? "Ошибка загрузки понравившихся постов." : "Failed to load liked posts."}</p>`;
                console.error(err);
            } finally {
                likedLoading = false;
            }
        }

        async function loadPublishedPosts() {
            if (likedLoading) return;

            const container = document.getElementById("posts");
            container.innerHTML = "";
            page = 1;
            likedReachedEnd = false;

            likedLoading = true;
            await loadUserReactions();

            try {
                const response = await fetch(`/published-posts/?userId=${userId}&curPage=${page}`);
                const posts = await response.json();

                if (!posts || posts.length === 0) {
                    likedReachedEnd = true;
                    const endMsg = document.createElement("p");
                    endMsg.className = "text-center text-muted";
                    endMsg.innerText = language === "ru" ? "Посты закончились." : "No more liked posts.";
                    container.appendChild(endMsg);
                    return;
                }

                posts.forEach(post => {
                    const categoriesStr = language === "ru"
                        ? (Array.isArray(post.categoriesRu) ? post.categoriesRu.map(c => `#${c}`).join(" ") : "")
                        : (Array.isArray(post.categoriesEng) ? post.categoriesEng.map(c => `#${c}`).join(" ") : "");

                    const isCommunityPost = !!post.communityName;
                    const name = isCommunityPost ? post.communityName : post.author.userName;
                    const avatarUrl = isCommunityPost ? post.communityAvatar : post.userAvatar;
                    const borderClass = isCommunityPost ? "border-community" : "border-user";

                    const reaction = userReactions.find(r => Number(r.postId) === Number(post.id));
                    const isUserLiked = reaction?.isLike === true;
                    const isUserDisliked = reaction?.isLike === false;

                    const div = document.createElement("div");
                    div.className = "card mb-3";

                    const avatarHtml = avatarUrl
                        ? `<img src="${avatarUrl}" alt="avatar" class="rounded-circle me-2 ${borderClass}" style="width: 45px; height: 45px; object-fit: cover;">`
                        : `<div class="rounded-circle me-2 ${borderClass} d-flex align-items-center justify-content-center" style="width: 45px; height: 45px; background-color: #4D96FF; font-weight: bold; font-size: 1.5rem; color: white;">
                                       ${name.charAt(0).toUpperCase()}
                                   </div>`;

                    div.innerHTML = `
                                <div class="card-body position-relative">
                                    <div style="position: absolute; top: 8px; right: 12px; color: #aaa; font-size: 0.85em;">
                                        ${new Date(post.createAt).toLocaleDateString()} ${new Date(post.createAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                                    </div>

                                    <div class="d-flex align-items-center mb-3">
                                        <a href="${isCommunityPost ? `/Community/${post.communityId}` : `/UserPage/${post.author.id}`}" class="d-flex align-items-center text-decoration-none text-dark">
                                            ${avatarHtml}
                                            <strong>${name}</strong>
                                        </a>
                                    </div>

                                    <h5>${post.title}</h5>
                                    <div class="post-images mb-3 d-flex flex-wrap gap-2">
                                        ${post.postImages.map((imgUrl) => `
                                            <img src="${imgUrl}" alt="post image" class="img-thumbnail post-img-thumb"
                                                 style="max-width: 200px; cursor: pointer;"
                                                 onclick="openImageModal('${imgUrl}')">`).join("")}
                                    </div>
                                    <p>${post.content}</p>
                                    <span class="badge bg-primary me-1">${categoriesStr}</span>
                                    <p class="text-muted mt-2">
                                        <button onclick="handleReaction(${post.id}, true)" class="btn btn-sm text-decoration-none ${isUserLiked ? 'user-liked' : ''}" id="like-${post.id}">💙 <span>${post.likes}</span></button>
                                        /
                                        <button onclick="handleReaction(${post.id}, false)" class="btn btn-sm text-decoration-none ${isUserDisliked ? 'user-disliked' : ''}" id="dislike-${post.id}">💧 <span>${post.dislikes}</span></button>
                                        👀${post.views}
                                        <a href="/Post/${post.id}" class="ms-4 text-muted text-decoration-none">
                                            ${post.comments} 💬 ${language === "ru" ? "Комментарии" : "Comments"}
                                        </a>
                                    </p>
                                </div>
                            `;

                    observeViews(post.id, div);//ломает эта залупа
                    container.appendChild(div);
                });

                page++;
            } catch (err) {
                container.innerHTML = `<p>${language === "ru" ? "Ошибка загрузки понравившихся постов." : "Failed to load liked posts."}</p>`;
                console.error(err);
            } finally {
                likedLoading = false;
            }
        }

        function observeViews(postId, div) {
            const observer = new IntersectionObserver(entries => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        fetch(`/increment-view/${postId}`, { method: 'POST' });
                        observer.disconnect();
                    }
                });
            }, { threshold: 0.5 });

            observer.observe(div);
        }

                async function handleReaction(postId, isLike) {
            const reaction = userReactions.find(r => Number(r.postId) === Number(postId));
            let newReaction;

            if (!reaction) {
                newReaction = { postId, userId, isLike };
            } else if (reaction.isLike === isLike) {
                // Нажал то же самое → снять реакцию
                newReaction = { postId, userId, isLike };
            } else {
                // Смена реакции
                newReaction = { postId, userId, isLike };
            }

            try {
                const response = await fetch('/update-reactions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(newReaction)
                });

                const result = await response.json();

                // Обновление userReactions
                if (result.userReaction === null) {
                    userReactions = userReactions.filter(r => r.postId !== postId);
                } else {
                    const index = userReactions.findIndex(r => r.postId === postId);
                    if (index >= 0) {
                        userReactions[index].isLike = result.userReaction;
                    } else {
                        userReactions.push({ postId, userId, isLike: result.userReaction });
                    }
                }

                // Обновление отображения
                const likeBtn = document.getElementById(`like-${postId}`);
                const dislikeBtn = document.getElementById(`dislike-${postId}`);

                likeBtn.classList.toggle("user-liked", result.userReaction === true);
                dislikeBtn.classList.toggle("user-disliked", result.userReaction === false);

                likeBtn.querySelector("span").innerText = result.likes;
                dislikeBtn.querySelector("span").innerText = result.dislikes;

            } catch (err) {
                console.error("Ошибка обновления реакции", err);
            }
        }

        function openImageModal(url) {
            const modal = document.getElementById("imageModalSimple");
            const modalImg = document.getElementById("modalImageSimple");
            modalImg.src = url;
            modal.style.display = "flex";
        }

        function closeImageModal() {
            const modal = document.getElementById("imageModalSimple");
            modal.style.display = "none";
        }
        // Вызов при загрузке страницы
        document.addEventListener("DOMContentLoaded", async () => {
            await loadUserReactions();
            await loadLikedPosts(); // <-- Вызов загрузки постов
        });

        let communitiesLoading = false;
        let communitiesReachedEnd = false;

        async function loadSubscribedCommunities() {
            if (communitiesLoading) return;

            const container = document.getElementById("posts");
            container.innerHTML = "";
            page = 1;
            communitiesReachedEnd = false;

            communitiesLoading = true;

            try {
                const response = await fetch(`/subscribed-communities?userId=${userId}&curPage=${page}`);
                const communities = await response.json();

                if (!communities || communities.length === 0) {
                    communitiesReachedEnd = true;
                    const endMsg = document.createElement("p");
                    endMsg.className = "text-center text-muted";
                    endMsg.innerText = language === "ru" ? "Подписки закончились." : "No more subscriptions.";
                    container.appendChild(endMsg);
                    return;
                }

                communities.forEach(comm => {
                    const categoriesStr = language === "ru"
                        ? (Array.isArray(comm.categoriesRu) ? comm.categoriesRu.map(c => `#${c}`).join(" ") : "")
                        : (Array.isArray(comm.categoriesEng) ? comm.categoriesEng.map(c => `#${c}`).join(" ") : "");

                    const isJoined = comm.isJoined === true; // предположим, что есть

                    const avatarHtml = comm.avatarUrl
                        ? `<img src="${comm.avatarUrl}" alt="avatar" class="rounded-circle me-2 border-community" style="width: 45px; height: 45px; object-fit: cover;">`
                        : `<div class="rounded-circle me-2 border-community d-flex align-items-center justify-content-center" style="width: 45px; height: 45px; background-color: #4D96FF; font-weight: bold; font-size: 1.5rem; color: white;">
                       ${comm.communityName.charAt(0).toUpperCase()}
                   </div>`;

                    const buttonHtml = 
                        `<button class="btn btn-light join-btn" data-community-id="${comm.id}"
                            style="position: absolute; top: 28px; right: 40px; width: 125px; color: #888; border-color: #ccc;">
                            ${@joined}
                   </button>`;

                    const div = document.createElement("div");
                    div.className = "card mb-3";

                    div.innerHTML = `
                <div class="card-body position-relative">
                    <div style="position: absolute; top: 8px; right: 12px; color: #aaa; font-size: 0.85em;">
                        ${new Date(comm.createAt).toLocaleDateString()} ${new Date(comm.createAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                    </div>
                    <div class="d-flex align-items-center position-relative">
                        <a href="/Community/${comm.id}" class="d-flex align-items-center text-decoration-none text-dark">
                            ${avatarHtml}
                            <strong>${comm.communityName}</strong>
                        </a>
                        ${buttonHtml}
                    </div>
                    <p>${comm.description || ''}</p>
                    <span class="badge bg-primary me-1">${categoriesStr}</span>
                    <p class="text-muted mb-0">
                        <small>👥 @sub: ${comm.numberOfMember}</small>
                    </p>
                </div>
            `;

                    container.appendChild(div);
                });



                page++;
            } catch (err) {
                container.innerHTML = `<p>${language === "ru" ? "Ошибка загрузки сообществ." : "Failed to load communities."}</p>`;
                console.error(err);
            } finally {
                communitiesLoading = false;
            }
        }

        document.addEventListener("click", async (e) => {
            if (!e.target.classList.contains("join-btn")) return;

            const btn = e.target;
            const communityId = btn.dataset.communityId;
            const isJoined = btn.classList.contains("btn-light");

            try {
                const url = isJoined ? "/unsub" : "/sub";
                const method = isJoined ? "DELETE" : "POST";

                const res = await fetch(`${url}?userId=${userId}`, {
                    method,
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(communityId)
                });

                const success = await res.json();

                if (success) {
                    btn.classList.toggle("btn-light");
                    btn.classList.toggle("btn-primary");
                    btn.textContent = isJoined ? @join : @joined;
                } else {
                    alert("Ошибка при выполнении действия");
                }
            } catch (error) {
                alert("Произошла ошибка при выполнении действия");
                console.error(error);
            }
        });


        async function loadOwnedCommunities() {
            if (communitiesLoading) return;

            const container = document.getElementById("posts");
            container.innerHTML = "";
            page = 1;
            communitiesReachedEnd = false;

            communitiesLoading = true;

            try {
                const response = await fetch(`/created-communities/?userId=${userId}&curPage=${page}`);
                const communities = await response.json();

                if (!communities || communities.length === 0) {
                    communitiesReachedEnd = true;
                    const endMsg = document.createElement("p");
                    endMsg.className = "text-center text-muted";
                    endMsg.innerText = language === "ru" ? "Сообщества закончились." : "No more communities.";
                    container.appendChild(endMsg);
                    return;
                }

                communities.forEach(comm => {
                    const categoriesStr = language === "ru"
                        ? (Array.isArray(comm.categoriesRu) ? comm.categoriesRu.map(c => `#${c}`).join(" ") : "")
                        : (Array.isArray(comm.categoriesEng) ? comm.categoriesEng.map(c => `#${c}`).join(" ") : "");

                    const div = document.createElement("div");
                    div.className = "card mb-3";

                    const avatarHtml = comm.avatarUrl
                        ? `<img src="${comm.avatarUrl}" alt="avatar" class="rounded-circle me-2 border-community" style="width: 45px; height: 45px; object-fit: cover;">`
                        : `<div class="rounded-circle me-2 border-community d-flex align-items-center justify-content-center" style="width: 45px; height: 45px; background-color: #4D96FF; font-weight: bold; font-size: 1.5rem; color: white;">
                               ${comm.communityName.charAt(0).toUpperCase()}
                           </div>`;

                    div.innerHTML = `
                        <div class="card-body">
                           <div style="position: absolute; top: 8px; right: 12px; color: #aaa; font-size: 0.85em;">
                            ${new Date(comm.createAt).toLocaleDateString()} ${new Date(comm.createAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                                    </div>
                            <a href="/Community/${comm.id}" class="d-flex align-items-center text-de coration-none text-dark mb-2">
                                ${avatarHtml}
                                <strong>${comm.communityName}</strong>
                            </a>
                            <p>${comm.description || ''}</p>
                            <span class="badge bg-primary me-1">${categoriesStr}</span>
                            <p class="text-muted mb-0">
                            <small>👥 @sub: ${comm.numberOfMember}</small>
                            </p>
                        </div>
                    `;

                    container.appendChild(div);
                });

                page++;
            } catch (err) {
                container.innerHTML = `<p>${language === "ru" ? "Ошибка загрузки сообществ." : "Failed to load communities."}</p>`;
                console.error(err);
            } finally {
                communitiesLoading = false;
            }
        }
    </script>
}