@using Core.Models
@using System.Text.Json
@model UserResponse

@{
    var language = ViewBag.Language;
}

@section Head {
}

@section Body {
    <div class="app-wrapper">

        <div class="main-content">
            <div class="post" id="posts">
                <p>Загрузка постов...</p>
            </div>
        </div>
    </div>

        <script>
            function revealSpoiler() {
                const spoiler = document.getElementById('spoilerContent');
                spoiler.classList.add('revealed');
                spoiler.innerHTML = '<p>This is the spoiler content revealed.</p>';
            }
        </script>
}

@section Script {
    <script>
        let curPage = 1;
        let loading = false;
        let reachedEnd = false;
        const language = "@language";
        const userId = @Model.Id;
        let userReactions = [];

        async function loadUserReactions() {
            try {
                const response = await fetch(`/take-reactions/${userId}`);
                userReactions = await response.json();
            } catch (err) {
                console.error("Ошибка загрузки реакций", err);
            }
        }

        async function loadPosts() {
            if (loading || reachedEnd) return;

            loading = true;
            try {
                const response = await fetch(`/by-filter/home?curPage=${curPage}`);
                const posts = await response.json();

                if (!posts || posts.length === 0) {
                    reachedEnd = true;
                    const endMsg = document.createElement("p");
                    endMsg.className = "text-center text-muted";
                    endMsg.innerText = "Все посты загружены.";
                    document.getElementById("posts").appendChild(endMsg);
                    return;
                }

                const postsDiv = document.getElementById("posts");
                if (curPage === 1) {
                    postsDiv.innerHTML = "";
                }

                posts.forEach(post => {
                    const categoriesStr = language === "ru"
                        ? (Array.isArray(post.categoriesRu) ? post.categoriesRu.map(cat => `#${cat}`).join(" ") : "")
                        : (Array.isArray(post.categoriesEng) ? post.categoriesEng.map(cat => `#${cat}`).join(" ") : "");

                    const isCommunityPost = !!post.communityName;
                    const name = isCommunityPost ? post.communityName : post.author.userName;
                    const avatarUrl = isCommunityPost ? post.communityAvatar : post.userAvatar;
                    const borderClass = isCommunityPost ? "border-community" : "border-user";

                    const reaction = userReactions.find(r => Number(r.postId) === Number(post.id));
                    const isUserLiked = reaction?.isLike === true;
                    const isUserDisliked = reaction?.isLike === false;

                    const div = document.createElement("div");
                    div.className = "card mb-3";

                    div.innerHTML = `
                        <div class="card-body position-relative">
                            <div style="position: absolute; top: 8px; right: 12px; color: #aaa; font-size: 0.85em;">
                                ${new Date(post.createAt).toLocaleDateString()} ${new Date(post.createAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                            </div>

                            <div class="d-flex align-items-center mb-3">
                                <img src="${avatarUrl}" alt="avatar" class="rounded-circle me-2 ${borderClass}" style="width: 40px; height: 40px; object-fit: cover;">
                                <strong>${name}</strong>
                            </div>

                            <h5>${post.title}</h5>
                            <p>${post.content}</p>
                            <span class="badge bg-primary me-1">${categoriesStr}</span>
                            <p class="text-muted mt-2">
                                <span class="${isUserLiked ? 'user-liked' : ''}">💙 ${post.likes}</span> /
                                <span class="${isUserDisliked ? 'user-disliked' : ''}">💧 ${post.dislikes}</span> 👀${post.views}
                            </p>
                        </div>
                    `;

                    observeViews(post.id, div);
                    postsDiv.appendChild(div);
                });

                curPage++;
            } catch (error) {
                document.getElementById("posts").innerHTML = "<p>Не удалось загрузить посты.</p>";
                console.error("Ошибка загрузки постов:", error);
            } finally {
                loading = false;
            }
        }
        document.addEventListener("DOMContentLoaded", async () => {
            await loadUserReactions();
            await loadPosts();
            window.addEventListener("scroll", () => {
                const nearBottom = window.innerHeight + window.scrollY >= document.body.offsetHeight - 100;
                if (nearBottom) {
                    loadPosts();
                }
            });
        });

        function observeViews(postId, div) {
            const observer = new IntersectionObserver(entries => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        fetch(`/increment-view/${postId}`, { method: 'POST' });
                        observer.disconnect();
                    }
                });
            }, { threshold: 0.5 });

            observer.observe(div);
        }
    </script>
}
