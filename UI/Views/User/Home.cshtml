@using Core.Models
@model UserResponse

@{
    ViewBag.CurPage = 1;
}

@section Head {
}

@section Body {
    <div class="app-wrapper">
        <div class="sidebar">
            <a href="#" class="nav-link">Home</a>
            <a href="#" class="nav-link">Popular</a>
            <a href="#" class="nav-link">Explore</a>
            <a href="#" class="nav-link">New</a>

            <hr>

            <h6>TO LIGHT FIRE</h6>
            <a href="#" class="nav-link">- Create a custom post</a>

            <hr>

            <h6>CREATE CAMPFIRE</h6>
            <a href="#" class="nav-link">- Create a community</a>

            <hr>

            <h6>RESOURCES</h6>
            <a href="#" class="nav-link">About</a>
            <a href="#" class="nav-link">Advertise</a>
            <a href="#" class="nav-link">Help</a>

            <hr>

            <h6>THE BESTS</h6>
            <a href="#" class="nav-link">Communities</a>
            <a href="#" class="nav-link">Fires</a>
            <a href="#" class="nav-link">Topics</a>
        </div>

        <div class="main-content">
            <div class="post" id="posts">
                <p>Загрузка постов...</p>
            </div>
        </div>
    </div>

        <script>
            function revealSpoiler() {
                const spoiler = document.getElementById('spoilerContent');
                spoiler.classList.add('revealed');
                spoiler.innerHTML = '<p>This is the spoiler content revealed.</p>';
            }
        </script>
}

@section Script {
    <script>
        let curPage = 1;
            let loading = false; // чтобы не запускалось несколько раз одновременно
            let reachedEnd = false; // чтобы остановить подгрузку, если постов больше нет

        async function loadPosts() {
            if (loading || reachedEnd) return;

            loading = true;
            try {
                const response = await fetch(`/by-filter/home?curPage=${curPage}`);
                const posts = await response.json();

                if (!posts || posts.length === 0) {
                    reachedEnd = true;
                    const endMsg = document.createElement("p");
                    endMsg.className = "text-center text-muted";
                    endMsg.innerText = "Все посты загружены.";
                    document.getElementById("posts").appendChild(endMsg);
                    return;
                }

                const postsDiv = document.getElementById("posts");
                if (curPage === 1) {
                    postsDiv.innerHTML = ""; // очистить "Загрузка..."
                }

                posts.forEach(post => {
                    const div = document.createElement("div");
                    div.className = "card mb-3";
                    div.innerHTML = `
                                        <div class="card-body">
                                            <h5>${post.title}</h5>
                                            <p>${post.content}</p>
                                            <p class="text-muted">👤 ${post.author.userName} — 💙 ${post.likes} / 👎 ${post.dislikes}  👀${post.views}</p>
                                        </div>
                                    `;
                    postsDiv.appendChild(div);
                });

                curPage++;
            } catch (error) {
                document.getElementById("posts").innerHTML = "<p>Не удалось загрузить посты.</p>";
                console.error("Ошибка загрузки постов:", error);
            } finally {
                loading = false;
            }
        }

        document.addEventListener("DOMContentLoaded", () => {
            loadPosts(); // загрузка первой страницы
            window.addEventListener("scroll", () => {
                const nearBottom = window.innerHeight + window.scrollY >= document.body.offsetHeight - 100;
                if (nearBottom) {
                    loadPosts(); // подгружаем следующую
                }
            });
        });
    </script>
}
