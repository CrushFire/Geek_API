@using Core.Models.Post
@model PostResponse

@{
    var language = ViewBag.Language as string ?? "ru";
    var isCommunityPost = Model.CommunityId > 0;
    var name = isCommunityPost ? Model.CommunityName : Model.Author.UserName;
    var avatarUrl = isCommunityPost ? Model.CommunityAvatar : Model.UserAvatar;
    var borderClass = isCommunityPost ? "border-community" : "border-user";
    var postId = Model.Id;
    var userId = Model.Author.Id;
    var userTokenId = ViewBag.userTokenId;

    var categories = language == "ru" ? Model.CategoriesRu : Model.CategoriesEng;
    var categoriesStr = string.Join(" ", categories.Select(c => $"#{c}"));
}

@section Head {

}

@section Body {
    <div class="admin-page-container">
        <div class="post-container">
            <article class="post-content">
            
            <div class="position-absolute text-muted" style="top: 16px; right: 20px; font-size: 0.9rem;">
                @Model.CreateAt.ToString("dd.MM.yyyy HH:mm")
            </div>

            <div class="d-flex align-items-center mb-4">
                <a href="@(
                    isCommunityPost ? $"/Community/{Model.CommunityId}" : $"/UserPage/{Model.Author.Id}"
                )" class="d-flex align-items-center text-decoration-none text-dark">
                    @if (!string.IsNullOrEmpty(avatarUrl))
                    {
                        <img src="@avatarUrl" alt="avatar"
                             class="rounded-circle me-3 @borderClass"
                             style="width: 60px; height: 60px; object-fit: cover;" />
                    }
                    else
                    {
                        <div class="rounded-circle me-3 @borderClass d-flex align-items-center justify-content-center"
                             style="width: 60px; height: 60px; background-color: #4D96FF; font-weight: bold; font-size: 2rem; color: white;">
                            @name[0].ToString().ToUpper()
                        </div>
                    }
                    <strong style="font-size: 1.25rem;">@name</strong>
                </a>
            </div>

            <h3 class="mb-3">@Model.Title</h3>

            @if (Model.PostImages != null && Model.PostImages.Any())
            {
                <div class="post-images mb-3 d-flex flex-wrap gap-3">
                    @foreach (var imgUrl in Model.PostImages)
                    {
                        <img src="@imgUrl" alt="post image" class="img-thumbnail post-img-thumb shadow-sm"
                             style="max-width: 220px; border-radius: 1rem; cursor: pointer;"
                             onclick="openImageModal('@imgUrl')" />
                    }
                </div>
            }

            <p class="fs-5">@Model.Content</p>

                <div class="mb-3">
                    <span class="badge bg-primary me-2">@Html.Raw(categoriesStr)</span>
            </div>

                @if (userId == userTokenId) {
                    <div id="dotsWrapper" class="position-relative d-inline-block" style="user-select:none;">
                        <div id="dotsButton" title="@((language == "ru") ? "Меню" : "Menu")"
                         style="position: absolute; right: 0; bottom: 0; cursor: pointer; font-size: 1.5rem; color: #444; user-select:none;">
                        &#8230; <!-- три точки -->
                    </div>
                    <div id="dotsMenu" class="bg-white border rounded shadow-sm"
                         style="display:none; position: absolute; right: 0; bottom: 24px; width: 100px; z-index: 1000; font-size: 0.9rem;">
                        <div id="deleteCommunity" style="padding: 8px 12px; cursor: pointer; color: #666; border-bottom: 1px solid #eee;">
                            @(language == "ru" ? "Удалить" : "Delete")
                        </div>
                        <div id="editCommunity" style="padding: 8px 12px; cursor: pointer; color: #666;">
                            @(language == "ru" ? "Изменить" : "Edit")
                        </div>
                    </div>
                </div>
                }

                <div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="confirmDeleteLabel">@((language == "ru") ? "Подтверждение удаления" : "Delete Confirmation")</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body" id="confirmDeleteText">
                                @((language == "ru") ? "Вы уверены, что хотите удалить сообщество?" : "Are you sure you want to delete the community?")
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@((language == "ru") ? "Отмена" : "Cancel")</button>
                                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">@((language == "ru") ? "Да, удалить" : "Yes, delete")</button>
                            </div>
                        </div>
                    </div>
                </div>

            <div class="text-muted mt-3 fs-6">
                <button onclick="handleReaction(@postId, true)" class="btn btn-sm text-decoration-none" id="like-@postId">
                    💙 <span>@Model.Likes</span>
                </button>
                /
                <button onclick="handleReaction(@postId, false)" class="btn btn-sm text-decoration-none" id="dislike-@postId">
                    💧 <span>@Model.Dislikes</span>
                </button>
                👀 @Model.Views

                <a href="/Post/@postId" class="ms-4 text-muted text-decoration-none">
                    💬 @Model.Comments комментариев
                </a>
            </div>

            </article>
            
            <div class="comments-section">
                <div id="commentsSection" class="mt-4">
                <!-- Здесь комментарии будут добавляться JS -->
                </div>

                <!-- Форма отправки комментария -->
                <div class="mt-3 w-100">
                    <textarea id="commentInput"
                              class="form-control mb-2 comment-input"
                              rows="2"
                              placeholder="Напишите комментарий..."></textarea>
                    <button id="sendCommentBtn" class="btn btn-primary comment-submit-btn">Отправить</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Модальное окно -->
    <div id="imageModalSimple" class="image-modal" onclick="closeImageModal()">
        <img id="modalImageSimple" class="image-modal-content" onclick="event.stopPropagation()" />
    </div>
</div>

<style>
    .post-container {
        max-width: 900px;
        margin: 0 auto;
        padding: 1rem;
    }

    .post-content {
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 2px 12px rgba(0,0,0,0.1);
        padding: 2rem;
        margin-bottom: 2rem;
    }

    .post-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .post-images {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 1rem;
        margin: 1.5rem 0;
    }

    .post-images img {
        width: 100%;
        height: 200px;
        object-fit: cover;
        border-radius: 8px;
        transition: transform 0.2s;
        cursor: pointer;
    }

    .post-images img:hover {
        transform: scale(1.05);
    }

    .comments-section {
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 2px 12px rgba(0,0,0,0.1);
        padding: 2rem;
    }

    .comment {
        border-bottom: 1px solid #eee;
        padding: 1rem 0;
    }

    .comment:last-child {
        border-bottom: none;
    }

    .comment-form {
        margin-top: 2rem;
    }

    .comment-input {
        border-radius: 8px;
        border: 1px solid #e0e0e0;
        padding: 1rem;
        transition: all 0.2s;
    }

    .comment-input:focus {
        border-color: #0d6efd;
        box-shadow: 0 0 0 3px rgba(13, 110, 253, 0.15);
    }

    @@media (max-width: 768px) {
        .post-content,
        .comments-section {
            padding: 1rem;
        }

        .post-images {
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        }

        .post-images img {
            height: 150px;
        }
    }
</style>

}

@section Script {
    <script>
        const postId = @Model.Id;
        const userId = @Model.Author.Id;
        const userTokenId = @userTokenId;
        let curPage = 1;
        let userReactions = [];

            // Отправка комментария
            document.getElementById('sendCommentBtn').addEventListener('click', sendComment);

            // Загрузка данных
            loadUserReactions();
            loadComments(postId, curPage);

        async function loadUserReactions() {
            try {
                const response = await fetch(`/take-reactions/${userId}`);
                userReactions = await response.json();

                const reaction = userReactions.find(r => Number(r.postId) === postId);
                if (reaction) {
                    const likeBtn = document.getElementById(`like-${postId}`);
                    const dislikeBtn = document.getElementById(`dislike-${postId}`);
                    likeBtn.classList.toggle("user-liked", reaction.isLike === true);
                    dislikeBtn.classList.toggle("user-disliked", reaction.isLike === false);
                }
            } catch (err) {
                console.error("Ошибка загрузки реакций", err);
            }
        }

        async function handleReaction(postId, isLike) {
            const reaction = userReactions.find(r => Number(r.postId) === postId);
            const newReaction = { postId, userId, isLike };

            try {
                const response = await fetch('/update-reactions', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(newReaction)
                });

                const result = await response.json();

                if (result.userReaction === null) {
                    userReactions = userReactions.filter(r => r.postId !== postId);
                } else {
                    const index = userReactions.findIndex(r => r.postId === postId);
                    if (index >= 0) {
                        userReactions[index].isLike = result.userReaction;
                    } else {
                        userReactions.push({ postId, userId, isLike: result.userReaction });
                    }
                }

                const likeBtn = document.getElementById(`like-${postId}`);
                const dislikeBtn = document.getElementById(`dislike-${postId}`);
                likeBtn.classList.toggle("user-liked", result.userReaction === true);
                dislikeBtn.classList.toggle("user-disliked", result.userReaction === false);
                likeBtn.querySelector("span").innerText = result.likes;
                dislikeBtn.querySelector("span").innerText = result.dislikes;
            } catch (err) {
                console.error("Ошибка обновления реакции", err);
            }
        }

        async function sendComment() {
            const commentContent = document.getElementById('commentInput').value.trim();
            if (!commentContent) {
                alert('Комментарий не может быть пустым');
                return;
            }

            const requestBody = { postId, content: commentContent };

            try {
                const response = await fetch('/comment', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(requestBody)
                });

                if (!response.ok) {
                    const errData = await response.json();
                    alert(errData.message || 'Ошибка при отправке комментария');
                    return;
                }

                document.getElementById('commentInput').value = '';
                loadComments(postId, curPage);
            } catch (err) {
                console.error('Ошибка отправки комментария', err);
                alert('Ошибка сети при отправке комментария');
            }
        }

        async function loadComments(postId, page = 1) {
            try {
                const response = await fetch(`/by-post?postId=${postId}&curPage=${page}`);
                if (!response.ok) throw new Error('Ошибка загрузки комментариев');
                const comments = await response.json();

                const commentsSection = document.getElementById('commentsSection');
                commentsSection.innerHTML = '';

                comments.forEach(comment => {
                    const elem = createCommentElement(comment);
                    commentsSection.appendChild(elem);
                });
            } catch (err) {
                console.error(err);
            }
        }

        function createCommentElement(comm) {
            const div = document.createElement('div');
            div.className = 'card comment mb-3 position-relative';

            const avatarUrl = comm.author.images.find(img => img.imageType === 'avatar' && img.entityId == comm.author.id)?.imageUrl || '';
            const avatarHtml = avatarUrl
                ? `<img src="${avatarUrl}" alt="avatar" class="rounded-circle me-2 border-user" style="width: 45px; height: 45px; object-fit: cover;">`
                : `<div class="rounded-circle me-2 border-user d-flex align-items-center justify-content-center" style="width: 45px; height: 45px; background-color: #4D96FF; font-weight: bold; font-size: 1.5rem; color: white;">${comm.author.userName.charAt(0).toUpperCase()}</div>`;

            div.innerHTML = `
                    <div class="card-body p-3">
                        <div style="position: absolute; top: 8px; right: 12px; color: #aaa; font-size: 0.85em;">
                            ${new Date(comm.createAt).toLocaleDateString()} ${new Date(comm.createAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                        </div>
                        <a href="/UserPage/${comm.author.id}" class="d-flex align-items-center text-decoration-none text-dark mb-2">
                            ${avatarHtml}
                            <strong>${comm.author.userName}</strong>
                        </a>
                        <p>${comm.content || ''}</p>
                    </div>`;
            return div;
        }

        function openImageModal(url) {
            const modal = document.getElementById("imageModalSimple");
            const modalImg = document.getElementById("modalImageSimple");
            modalImg.src = url;
            modal.style.display = "flex";
        }

        function closeImageModal() {
            const modal = document.getElementById("imageModalSimple");
            modal.style.display = "none";
        }

        document.addEventListener('DOMContentLoaded', () => {
            const dotsButton = document.getElementById('dotsButton');
            const dotsMenu = document.getElementById('dotsMenu');
            const deleteCommunity = document.getElementById('deleteCommunity');
            const editCommunity = document.getElementById('editCommunity');
            const confirmDeleteModal = new bootstrap.Modal(document.getElementById('confirmDeleteModal'));
            const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');

            // Показ/скрытие меню по клику на три точки
            dotsButton.addEventListener('click', (e) => {
                e.stopPropagation(); // чтобы клик не всплывал и не закрыл меню сразу
                if (dotsMenu.style.display === 'block') {
                    dotsMenu.style.display = 'none';
                } else {
                    dotsMenu.style.display = 'block';
                }
            });

            // Скрываем меню при клике вне его
            document.addEventListener('click', () => {
                dotsMenu.style.display = 'none';
            });

            // Клик по "Удалить" — показываем модалку
            deleteCommunity.addEventListener('click', () => {
                dotsMenu.style.display = 'none';
                confirmDeleteModal.show();
            });

            // Клик по "Изменить" — здесь можно добавить нужное действие
            editCommunity.addEventListener('click', () => {
                window.location.href = `/Post/Edit/${postId}`;
            });

            // Обработка кнопки подтверждения удаления
            confirmDeleteBtn.addEventListener('click', async () => {
                confirmDeleteBtn.disabled = true;

                try {
                    const response = await fetch(`/Post/Delete/?postId=${postId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (response.ok) {
                        const result = await response.json();
                        if (result === true || result === "true") {
                            // Успешно удалено, редирект
                            window.location.href = `/Popular/${userId}`;
                        } else {
                            alert(currentLanguage === "ru" ? "Ошибка при удалении сообщества" : "Failed to delete community");
                            confirmDeleteBtn.disabled = false;
                        }
                    } else {
                        alert(currentLanguage === "ru" ? "Ошибка сети при удалении" : "Network error while deleting");
                        confirmDeleteBtn.disabled = false;
                    }
                } catch (e) {
                    alert(currentLanguage === "ru" ? "Ошибка при удалении сообщества" : "Error deleting community");
                    confirmDeleteBtn.disabled = false;
                    console.error(e);
                }
            });

        });


    </script>


}