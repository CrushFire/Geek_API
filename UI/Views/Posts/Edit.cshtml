@{
    ViewData["Title"] = "Редактирование поста";
    var userId = ViewBag.UserId ?? 0;
}

@section Body {
    <div class="app-wrapper">
        <div class="main-content">
            <div class="container py-4">
                <div class="card p-4 shadow rounded-4">
                    <h2>Редактирование поста</h2>

                    <form id="postForm" enctype="multipart/form-data">
                        <div class="mb-3">
                            <label for="title" class="form-label">Заголовок</label>
                            <input type="text" id="title" name="Title" class="form-control" required />
                        </div>

                        <div class="mb-3">
                            <label for="content" class="form-label">Содержание</label>
                            <textarea id="content" name="Content" class="form-control" rows="5" required></textarea>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Публиковать от лица</label>
                            <select id="communitySelect" name="CommunityId" class="form-select">
                                <option value="0" selected>От себя (автора)</option>
                            </select>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Категории (1–5)</label>
                            <div id="categoryList" class="d-flex flex-wrap gap-2"></div>
                            <div class="form-text text-danger" id="categoryError" style="display:none;">
                                Выберите от 1 до 5 категорий.
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Изображения</label>
                            <div id="existingImages" class="d-flex flex-wrap gap-3 mb-2"></div>

                            <label for="newImageInput" class="form-label">Добавить изображение</label>
                            <input type="file" id="newImageInput" accept="image/*" class="form-control mb-2" />
                            <button type="button" id="uploadImageBtn" class="btn btn-success">Добавить</button>
                        </div>

                        <button type="submit" class="btn btn-primary mt-3">Сохранить изменения</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
}

@section Script {
    <script>
        const urlParts = window.location.pathname.split('/');
        const postId = urlParts[urlParts.length - 1];
        const selectedCategories = new Set();
        const categoryError = document.getElementById("categoryError");
        const existingImagesContainer = document.getElementById("existingImages");

        let existingImages = [];
        let imagesToRemove = [];

        let newImages = [];
        let newImageUrls = [];

        async function loadPostData() {
            const res = await fetch(`/get-post?postId=${postId}`);
            const post = await res.json();

            document.getElementById("title").value = post.title ?? "";
            document.getElementById("content").value = post.content ?? "";

            const communitySelect = document.getElementById("communitySelect");
            communitySelect.value = post.communityId?.toString() || "0";

            post.categoriesIds?.forEach(id => selectedCategories.add(id));
            await loadCategories();

            existingImages = post.postImages ?? [];
            renderImages();
        }

        async function loadCategories() {
            const res = await fetch(`/Category`);
            const categories = await res.json();
            const container = document.getElementById("categoryList");
            container.innerHTML = "";

            categories.forEach(cat => {
                const catId = +cat.id;
                const isSelected = selectedCategories.has(catId);

                const span = document.createElement("span");
                span.className = "badge rounded-pill category-pill " + (isSelected ? "bg-primary" : "bg-secondary");
                span.innerText = cat.title;
                span.style.cursor = "pointer";

                span.onclick = () => {
                    if (selectedCategories.has(catId)) {
                        selectedCategories.delete(catId);
                        span.classList.remove("bg-primary");
                        span.classList.add("bg-secondary");
                    } else if (selectedCategories.size < 5) {
                        selectedCategories.add(catId);
                        span.classList.remove("bg-secondary");
                        span.classList.add("bg-primary");
                    }
                    categoryError.style.display = (selectedCategories.size === 0 || selectedCategories.size > 5) ? "block" : "none";
                };

                container.appendChild(span);
            });
        }

        async function loadUserCommunities() {
            const res = await fetch(`/created-communities/?userId=@userId&curPage=1`);
            const communities = await res.json();
            const select = document.getElementById("communitySelect");

            communities.forEach(comm => {
                const option = document.createElement("option");
                option.value = comm.id;
                option.text = comm.communityName;
                select.appendChild(option);
            });
        }

        function renderImages() {
            existingImagesContainer.innerHTML = "";

            // старые
            existingImages.forEach(img => {
                const wrapper = document.createElement("div");
                wrapper.className = "position-relative";

                const image = document.createElement("img");
                image.src = img.url;
                image.style.maxWidth = "150px";
                image.style.borderRadius = "8px";

                const btn = document.createElement("button");
                btn.innerText = "✕";
                btn.className = "position-absolute top-0 end-0 btn btn-sm btn-light";
                btn.style.transform = "translate(50%, -50%)";

                btn.onclick = () => {
                    imagesToRemove.push(img.id);
                    existingImages = existingImages.filter(i => i.id !== img.id);
                    renderImages();
                };

                wrapper.appendChild(image);
                wrapper.appendChild(btn);
                existingImagesContainer.appendChild(wrapper);
            });

            // новые
            newImageUrls.forEach((url, index) => {
                const wrapper = document.createElement("div");
                wrapper.className = "position-relative";

                const image = document.createElement("img");
                image.src = url;
                image.style.maxWidth = "150px";
                image.style.borderRadius = "8px";

                const btn = document.createElement("button");
                btn.innerText = "✕";
                btn.className = "position-absolute top-0 end-0 btn btn-sm btn-light";
                btn.style.transform = "translate(50%, -50%)";

                btn.onclick = () => {
                    newImages.splice(index, 1);
                    newImageUrls.splice(index, 1);
                    renderImages();
                };

                wrapper.appendChild(image);
                wrapper.appendChild(btn);
                existingImagesContainer.appendChild(wrapper);
            });
        }

        document.getElementById("uploadImageBtn").onclick = () => {
            const input = document.getElementById("newImageInput");
            const file = input.files[0];
            if (!file) return alert("Выберите изображение");

            const total = existingImages.length + newImages.length;
            if (total >= 5) return alert("Максимум 5 изображений");

            const url = URL.createObjectURL(file);
            newImages.push(file);
            newImageUrls.push(url);
            renderImages();
            input.value = "";
        };

        document.getElementById("postForm").addEventListener("submit", async (e) => {
            e.preventDefault();

            if (selectedCategories.size === 0 || selectedCategories.size > 5) {
                categoryError.style.display = "block";
                return;
            }

            const formData = new FormData(e.target);
            selectedCategories.forEach(id => formData.append("Categories", id));
            imagesToRemove.forEach(id => formData.append("ImagesToRemove", id));
            newImages.forEach(file => formData.append("NewImages", file));

            if (!formData.has("CommunityId")) {
                formData.append("CommunityId", "0");
            }

            const res = await fetch(`/edit-post?id=${postId}`, {
                method: "POST",
                body: formData
            });

            if (res.ok) {
                alert("Пост обновлён!");
                window.location.href = `/Post/${postId}`;
            } else {
                const json = await res.json();
                alert("Ошибка: " + (json.errorMessage ?? "Неизвестная"));
            }
        });

        loadUserCommunities();
        loadPostData();
    </script>
}
