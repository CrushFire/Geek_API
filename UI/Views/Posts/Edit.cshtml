@using System.Text.Json﻿
@{
    ViewData["Title"] = "Редактирование поста";
    var userId = ViewBag.UserId ?? 0;

    var title = ViewBag.pageData.From("Title");
    var name = ViewBag.pageData.From("Name");
    var takeCategory = ViewBag.pageData.From("TakeCategory");
    var content = ViewBag.pageData.From("Content");
    var prev = ViewBag.pageData.From("Prev");
    var next = ViewBag.pageData.From("Next");
    var uploadImage = ViewBag.pageData.From("Image");
    var addImage = ViewBag.pageData.From("AddImage");
    var selectFile = ViewBag.pageData.From("SelectFile");
    var notFile = ViewBag.pageData.From("NotFile");
    var add = ViewBag.pageData.From("Add");
    var saveChange = ViewBag.pageData.From("SaveChange");
    var maxImage = ViewBag.pageData.From("MaxImage");
    var successEdit = Html.Raw(JsonSerializer.Serialize(ViewBag.pageData.From("SuccessEdit")));
}

@section Head{
    <style>
        .hidden-file-input {
            display: none;
        }
    </style>
}

@section Body {
    <div class="app-wrapper">
        <div class="main-content">
            <div class="container py-4">
                <div class="card p-4 shadow rounded-4">
                    <h2>@title</h2>

                    <form id="postForm" enctype="multipart/form-data">
                        <div class="mb-3">
                            <label for="title" class="form-label">@name</label>
                            <input type="text" id="title" name="Title" class="form-control" required />
                        </div>

                        <div class="mb-3">
                            <label for="content" class="form-label">@content</label>
                            <textarea id="content" name="Content" class="form-control" rows="5" required></textarea>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">@takeCategory</label>
                            <div id="categoryList" class="d-flex flex-wrap gap-2"></div>
                            <div class="form-text text-danger" id="categoryError" style="display:none;">
                                @takeCategory
                            </div>
                            <div class="d-flex justify-content-between align-items-center mt-2 mb-3">
                                <button id="prevPage" type="button" class="btn btn-outline-secondary">&larr; @prev</button>
                                <button id="nextPage" type="button" class="btn btn-outline-secondary">@next &rarr;</button>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">@uploadImage</label>
                                <!-- Просмотр существующих изображений -->
                            <div id="existingImages" class="d-flex flex-wrap gap-3 mb-3"></div>

                            <!-- Кастомная кнопка и скрытый input для загрузки изображения -->
                            <div class="input-group">
                                <input type="file" id="newImageInput" accept="image/*" class="hidden-file-input" />

                                <button type="button" class="btn btn-success" onclick="document.getElementById('newImageInput').click()">
                                    @selectFile
                                </button>

                                <span class="form-control" id="newFileLabel">@notFile</span>

                                <button type="button" id="uploadImageBtn" class="btn btn-success">
                                    @add
                                </button>
                            </div>

                            <!-- Сообщение об ошибке -->
                            <div class="form-text text-danger" id="imageError" style="display:none;">
                                @maxImage
                            </div>

                        <button type="submit" class="btn btn-primary mt-3">Сохранить изменения</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
}

@section Script {
    <script>
        const urlParts = window.location.pathname.split('/');
        const postId = urlParts[urlParts.length - 1];

        const selectedCategories = new Set();
        let existingImages = [];
        let imagesToRemove = [];
        let newImages = [];
        let newImageUrls = [];

        const categoryError = document.getElementById("categoryError");
        const imageError = document.getElementById("imageError");
        const existingImagesContainer = document.getElementById("existingImages");

        let currentCategoryPage = 1;

        const newNotFile = "@notFile";

        document.getElementById("newImageInput").addEventListener("change", function () {
            const label = document.getElementById("newFileLabel");
            if (!this.files.length) {
                label.textContent = newNotFile;
            } else {
                const fileNames = Array.from(this.files).map(file => file.name).join(', ');
                label.textContent = fileNames;
            }
        });

        function updateFileName() {
            const input = document.getElementById("images");
            const label = document.getElementById("fileLabel");

            if (!input.files.length) {
                label.textContent = notFile;
            } else {
                const fileNames = Array.from(input.files).map(file => file.name).join(', ');
                label.textContent = fileNames;
            }
        }

        async function loadPostData() {
            try {
                const res = await fetch(`/get-post?postId=${postId}`);
                if (!res.ok) throw new Error("Ошибка загрузки поста");
                const post = await res.json();

                document.getElementById("title").value = post.title ?? "";
                document.getElementById("content").value = post.content ?? "";

                post.categoriesIds?.forEach(id => selectedCategories.add(id));
                await loadCategories(currentCategoryPage);

                existingImages = post.postImages ?? [];
                renderImages();
            } catch (err) {
                alert("Не удалось загрузить данные поста.");
                console.error(err);
            }
        }

        async function loadCategories(page = 1) {
            try {
                const res = await fetch(`/Category?curPage=${page}`);
                if (!res.ok) throw new Error("Ошибка при загрузке категорий");

                const categories = await res.json();
                if (categories.length === 0 && page > currentCategoryPage) return;

                currentCategoryPage = page;
                const container = document.getElementById("categoryList");
                container.innerHTML = "";

                categories.forEach(cat => {
                    const catId = +cat.id;
                    const isSelected = selectedCategories.has(catId);

                    const span = document.createElement("span");
                    span.className = "badge rounded-pill category-pill " + (isSelected ? "bg-primary" : "bg-secondary");
                    span.innerText = cat.title;
                    span.style.cursor = "pointer";

                    span.onclick = () => {
                        if (selectedCategories.has(catId)) {
                            selectedCategories.delete(catId);
                            span.classList.remove("bg-primary");
                            span.classList.add("bg-secondary");
                        } else if (selectedCategories.size < 5) {
                            selectedCategories.add(catId);
                            span.classList.remove("bg-secondary");
                            span.classList.add("bg-primary");
                        }
                        categoryError.style.display = (selectedCategories.size < 1 || selectedCategories.size > 5) ? "block" : "none";
                    };

                    container.appendChild(span);
                });

                document.getElementById("prevPage").disabled = currentCategoryPage === 1;
                document.getElementById("nextPage").disabled = categories.length === 0;
            } catch (err) {
                categoryError.style.display = "block";
                categoryError.innerText = "Не удалось загрузить категории.";
                console.error(err);
            }
        }

        function renderImages() {
            existingImagesContainer.innerHTML = "";

            existingImages.forEach(img => {
                const wrapper = document.createElement("div");
                wrapper.className = "position-relative";

                const image = document.createElement("img");
                image.src = img.url;
                image.style.maxWidth = "150px";
                image.style.borderRadius = "8px";

                const btn = document.createElement("button");
                btn.innerText = "✕";
                btn.className = "position-absolute top-0 end-0 btn btn-sm btn-light";
                btn.style.transform = "translate(50%, -50%)";

                btn.onclick = () => {
                    imagesToRemove.push(img.id);
                    existingImages = existingImages.filter(i => i.id !== img.id);
                    renderImages();
                };

                wrapper.appendChild(image);
                wrapper.appendChild(btn);
                existingImagesContainer.appendChild(wrapper);
            });

            newImageUrls.forEach((url, index) => {
                const wrapper = document.createElement("div");
                wrapper.className = "position-relative";

                const image = document.createElement("img");
                image.src = url;
                image.style.maxWidth = "150px";
                image.style.borderRadius = "8px";

                const btn = document.createElement("button");
                btn.innerText = "✕";
                btn.className = "position-absolute top-0 end-0 btn btn-sm btn-light";
                btn.style.transform = "translate(50%, -50%)";

                btn.onclick = () => {
                    newImages.splice(index, 1);
                    newImageUrls.splice(index, 1);
                    renderImages();
                };

                wrapper.appendChild(image);
                wrapper.appendChild(btn);
                existingImagesContainer.appendChild(wrapper);
            });
        }

        document.getElementById("uploadImageBtn").onclick = () => {
            const input = document.getElementById("newImageInput");
            const file = input.files[0];
            if (!file) return alert("Выберите изображение");

            if (existingImages.length + newImages.length >= 5) {
                imageError.style.display = "block";
                return alert("Максимум 5 изображений");
            }

            imageError.style.display = "none";
            const url = URL.createObjectURL(file);
            newImages.push(file);
            newImageUrls.push(url);
            renderImages();

            input.value = "";
        };

        document.getElementById("prevPage").addEventListener("click", () => {
            if (currentCategoryPage > 1) {
                loadCategories(currentCategoryPage - 1);
            }
        });

        document.getElementById("nextPage").addEventListener("click", () => {
            loadCategories(currentCategoryPage + 1);
        });

        document.getElementById("postForm").onsubmit = async (e) => {
            e.preventDefault();

            if (selectedCategories.size < 1 || selectedCategories.size > 5) {
                categoryError.style.display = "block";
                return alert("Выберите от 1 до 5 категорий");
            }

            if (existingImages.length + newImages.length > 5) {
                imageError.style.display = "block";
                return alert("Максимум 5 изображений");
            }

            const formData = new FormData();
            formData.append("Title", document.getElementById("title").value);
            formData.append("Content", document.getElementById("content").value);
            Array.from(selectedCategories).forEach(catId => {
              formData.append("Categories", catId);
            });
            imagesToRemove.forEach(id => {
                formData.append("ImagesToRemove", id);
            });
            formData.append("ImagesToRemove", -1);
            newImages.forEach(file => formData.append("NewImages", file));

            try {
                const response = await fetch(`/edit-post?id=${postId}`, {
                    method: "POST",
                    body: formData
                });

                if (!response.ok) throw new Error("Ошибка при сохранении");

                alert(@successEdit);
                window.location.href = `/post/${postId}`;
            } catch (error) {
                alert("Ошибка при сохранении поста: " + error.message);
            }
        };

        (async () => {
            await loadPostData();
        })();
    </script>
}
